/** X3DOM Runtime, http://www.x3dom.org/ 1.8.0 - 4c48cbddc8c7e1cbaa5d09fdd152934ec60fc7b8 - Wed Jul 24 14:56:37 2019 +0200 */
x3dom.registerNodeType("HAnimDisplacer","H-Anim",defineClass(x3dom.nodeTypes.X3DGeometricPropertyNode,function(ctx){x3dom.nodeTypes.HAnimDisplacer.superClass.call(this,ctx);this.addField_SFString(ctx,'name',"");this.addField_SFFloat(ctx,'weight',0);this.addField_MFInt32(ctx,'coordIndex',[]);this.addField_MFVec3f(ctx,'displacements',[]);x3dom.debug.logWarning("HAnimDisplacer in Segments NYI.");}));x3dom.registerNodeType("HAnimJoint","H-Anim",defineClass(x3dom.nodeTypes.Transform,function(ctx){x3dom.nodeTypes.HAnimJoint.superClass.call(this,ctx);this.addField_SFString(ctx,'name',"");this.addField_MFNode('displacers',x3dom.nodeTypes.HAnimDisplacer);this.addField_SFRotation(ctx,'limitOrientation','0 0 1 0');this.addField_MFFloat(ctx,'llimit',[]);this.addField_MFFloat(ctx,'ulimit',[]);this.addField_MFInt32(ctx,'skinCoordIndex',[]);this.addField_MFFloat(ctx,'skinCoordWeight',[]);this.addField_MFFloat(ctx,'stiffness',[0,0,0]);},{nodeChanged:function()
{this._humanoid=_findRoot(this._xmlNode);function _findRoot(domNode){var parent=domNode.parentNode._x3domNode;if(x3dom.isa(parent,x3dom.nodeTypes.Scene))return false
if(x3dom.isa(parent,x3dom.nodeTypes.HAnimHumanoid))return parent
return _findRoot(parent._xmlNode);}},collectDrawableObjects:function(transform,drawableCollection,singlePath,invalidateCache,planeMask,clipPlanes)
{if(singlePath&&(this._parentNodes.length>1))
singlePath=false;if(singlePath&&(invalidateCache=invalidateCache||this.cacheInvalid()))
this.invalidateCache();planeMask=drawableCollection.cull(transform,this.graphState(),singlePath,planeMask);var skinCoord=this._humanoid._cf.skinCoord.node;if(planeMask<0&&!skinCoord){return;}
var cnode,childTransform;if(singlePath){if(!this._graph.globalMatrix){this._graph.globalMatrix=this.transformMatrix(transform);}
childTransform=this._graph.globalMatrix;}
else{childTransform=this.transformMatrix(transform);}
var n=this._childNodes.length;if(x3dom.nodeTypes.ClipPlane.count>0){var localClipPlanes=[];for(var j=0;j<n;j++){if((cnode=this._childNodes[j])){if(x3dom.isa(cnode,x3dom.nodeTypes.ClipPlane)&&cnode._vf.on&&cnode._vf.enabled){localClipPlanes.push({plane:cnode,trafo:childTransform});}}}
clipPlanes=localClipPlanes.concat(clipPlanes);}
var skinCoordIndex,skinCoordWeight,humanoid,trafo,displacers;if(skinCoord){humanoid=this._humanoid;trafo=humanoid.getCurrentTransform().inverse().mult(childTransform);displacers=this._cf.displacers.nodes;if(displacers.length!==0){displacers.forEach(function(displacer){var weight=displacer._vf.weight;var MFdisplacements=displacer._vf.displacements;var offsets=MFdisplacements.length;if(offsets!==0){displacer._vf.coordIndex.forEach(function(coordIndex,i){skinCoord._vf.point[coordIndex]=skinCoord._vf.point[coordIndex].addScaled(trafo.multMatrixVec(MFdisplacements[i%offsets]),weight);});}});}
skinCoordIndex=this._vf.skinCoordIndex;if(skinCoordIndex.length!==0){skinCoordWeight=this._vf.skinCoordWeight;skinCoordIndex.forEach(function(coordIndex,i){var restCoord=humanoid._restCoords[coordIndex];skinCoord._vf.point[coordIndex]=skinCoord._vf.point[coordIndex].add(trafo.multMatrixPnt(restCoord).subtract(restCoord).multiply(skinCoordWeight[Math.min(i,skinCoordWeight.length-1)]));});}}
var skinNormal=this._humanoid._cf.skinNormal.node;if(skinNormal){skinCoordIndex=this._vf.skinCoordIndex;if(skinCoordIndex.length!==0){skinCoordWeight=this._vf.skinCoordWeight;humanoid=this._humanoid;trafo=humanoid.getCurrentTransform().inverse().mult(childTransform).inverse().transpose();skinCoordIndex.forEach(function(coordIndex,i){var restNormal=humanoid._restNormals[coordIndex];skinNormal._vf.vector[coordIndex]=skinNormal._vf.vector[coordIndex].add(trafo.multMatrixVec(restNormal).subtract(restNormal).multiply(skinCoordWeight[Math.min(i,skinCoordWeight.length-1)]));});}}
for(var i=0;i<n;i++){if((cnode=this._childNodes[i])){cnode.collectDrawableObjects(childTransform,drawableCollection,singlePath,invalidateCache,planeMask,clipPlanes);}}}}));x3dom.registerNodeType("HAnimSegment","H-Anim",defineClass(x3dom.nodeTypes.X3DGroupingNode,function(ctx){x3dom.nodeTypes.HAnimSegment.superClass.call(this,ctx);this.addField_SFString(ctx,'name',"");this.addField_SFVec3f(ctx,'centerOfMass',0,0,0);this.addField_SFFloat(ctx,'mass',0);this.addField_MFFloat(ctx,'momentsOfInertia',[0,0,0,0,0,0,0,0,0]);this.addField_SFNode('coord',x3dom.nodeTypes.X3DCoordinateNode);this.addField_MFNode('displacers',x3dom.nodeTypes.HAnimDisplacer);},{}));x3dom.registerNodeType("HAnimSite","H-Anim",defineClass(x3dom.nodeTypes.Transform,function(ctx){x3dom.nodeTypes.HAnimSite.superClass.call(this,ctx);this.addField_SFString(ctx,'name',"");}));x3dom.registerNodeType("HAnimHumanoid","H-Anim",defineClass(x3dom.nodeTypes.Transform,function(ctx){x3dom.nodeTypes.HAnimHumanoid.superClass.call(this,ctx);this.addField_SFString(ctx,'name',"");this.addField_SFString(ctx,'version',"");this.addField_MFString(ctx,'info',[]);this.addField_MFNode('joints',x3dom.nodeTypes.HAnimJoint);this.addField_MFNode('segments',x3dom.nodeTypes.HAnimSegment);this.addField_MFNode('sites',x3dom.nodeTypes.HAnimSite);this.addField_MFNode('skeleton',x3dom.nodeTypes.HAnimJoint);this.addField_MFNode('skin',x3dom.nodeTypes.X3DChildNode);this.addField_SFNode('skinCoord',x3dom.nodeTypes.X3DCoordinateNode);this.addField_SFNode('skinNormal',x3dom.nodeTypes.X3DNormalNode);this.addField_MFNode('viewpoints',x3dom.nodeTypes.HAnimSite);this.addField_SFString(ctx,'skeletalConfiguration','BASIC');this.addField_MFVec3f(ctx,'jointBindingPositions',[0,0,0]);this.addField_MFRotation(ctx,'jointBindingRotations',[0,0,1,0]);this.addField_MFVec3f(ctx,'jointBindingScales',[1,1,1]);this.addField_MFVec3f(ctx,'skinBindingCoords',[]);this.addField_MFVec3f(ctx,'skinBindingNormals',[]);},{collectDrawableObjects:function(transform,drawableCollection,singlePath,invalidateCache,planeMask,clipPlanes)
{if(singlePath&&(this._parentNodes.length>1))
singlePath=false;if(singlePath&&(invalidateCache=invalidateCache||this.cacheInvalid()))
this.invalidateCache();planeMask=drawableCollection.cull(transform,this.graphState(),singlePath,planeMask);if(planeMask<0){return;}
var cnode,childTransform;if(singlePath){if(!this._graph.globalMatrix){this._graph.globalMatrix=this.transformMatrix(transform);}
childTransform=this._graph.globalMatrix;}
else{childTransform=this.transformMatrix(transform);}
var n=this._childNodes.length;if(x3dom.nodeTypes.ClipPlane.count>0){var localClipPlanes=[];for(var j=0;j<n;j++){if((cnode=this._childNodes[j])){if(x3dom.isa(cnode,x3dom.nodeTypes.ClipPlane)&&cnode._vf.on&&cnode._vf.enabled){localClipPlanes.push({plane:cnode,trafo:childTransform});}}}
clipPlanes=localClipPlanes.concat(clipPlanes);}
if(this._cf.skinCoord.node)
this._cf.skinCoord.node._vf.point.setValues(this._restCoords);if(this._cf.skinNormal.node)
this._cf.skinNormal.node._vf.vector.setValues(this._restNormals);this._cf.skeleton.nodes.forEach(function(cnode){cnode.collectDrawableObjects(childTransform,drawableCollection,singlePath,invalidateCache,planeMask,clipPlanes);});this._cf.skin.nodes.forEach(function(cnode){cnode.collectDrawableObjects(childTransform,drawableCollection,singlePath,invalidateCache,planeMask,clipPlanes);});if(this._cf.skinCoord.node){this._cf.skinCoord.node._parentNodes.forEach(function(node){node.fieldChanged('coord');});}},nodeChanged:function()
{if(this._cf.skinCoord.node)
this._restCoords=this._cf.skinCoord.node._vf.point.copy();if(this._cf.skinNormal.node)
this._restNormals=this._cf.skinNormal.node._vf.vector.copy();}}));