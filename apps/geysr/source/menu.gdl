;;
;; Copyright (c) 2003, 2010 Genworks International, Bloomfield Hills,
;; MI, USA and Genworks BV, Delft, The Netherlands. The software, data
;; and information contained herein are proprietary to, and comprise
;; valuable trade secrets of, Genworks International and Genworks BV.
;; They are given in confidence pursuant to a written
;; nondisclosure/noncompete license agreement, and may be stored and
;; used only in accordance with the terms of such license.
;;
;;

(in-package :geysr)


(define-object menu (sheet-section)

  :input-slots (geysr
		viewport-js-text
		set-click-mode-func click-mode
		set-expand-mode-func expand-mode
		reset-zoom-func clear-func
		set-image-format-func image-format
		set-view-func view
		update-root-func set-self-func
		reset-root-func up-root-func
		(development-mode? nil :settable)
		(design-mode? nil)
		(local-assets? t))
		
  
  :computed-slots
  (
   (menu-object self)
   (force-refresh nil :settable)

   (menu-script
    (with-cl-who-string ()
      (:script "

function makeMenuBarHoverable (event)
{
 document.querySelector('#menu').classList.add('hoverable');
}


function hideMenus(event, force=null)
{ 

  var lis;
  var obj = (event && event.target);
  var menu = document.querySelector('#menu');

  if ((!force) && (obj && (obj.classList.contains('menu-show')))) return;  

  if (obj && menu.contains(obj))
  {
    while (obj && (!(obj.tagName == 'LI'))) obj = obj.parentNode;
    var ul = obj.parentNode;
    lis = ul.querySelectorAll('li');
  }
  
  else
  {
    lis = menu.querySelectorAll('ul li');   
    menu.classList.remove('hoverable');
  }

  for (var i=0;i<lis.length;i++)
   {
    var li = lis[i];
    if /* ((! (li == obj)) && (li.classList.contains('visible'))) */ 
       (! (li == obj))
       li.classList.remove('visible');
   }
}

setTimeout(hideMenus, 10);

document.addEventListener('click', hideMenus);

function addVisible(event, level)
{
  var obj = event.target;

  while (obj && (obj.tagName != 'UL')) obj = obj.parentNode;
  if (obj.tagName == 'UL') obj = obj.parentNode;
  if ((obj.tagName == 'LI') && (! (obj.classList.contains('visible'))))
    obj.classList.add('visible');
}


")))
   
   (inner-html (with-cl-who-string ()
		 (the force-refresh)
		 (str (the nav-html))))

   (nav-html (the nav html)))

  :objects ((nav :type 'geysr-nav :pass-down (menu-object design-mode? local-assets?)))

  :functions
  ((toggle-force-refresh! () (the (set-slot! :force-refresh (not (the force-refresh)))))
   (set-click-mode! (mode) (funcall (the set-click-mode-func) mode))
   (reset-zoom! () (funcall (the reset-zoom-func)) (the toggle-force-refresh!))
   (clear! () (funcall (the clear-func)) (the toggle-force-refresh!))
   (set-image-format! (format) (funcall (the set-image-format-func) format))
   (set-view! (view) (funcall (the set-view-func) view))
   (update-geysr! ()  (funcall (the update-root-func)))
   (set-self! ()   (funcall (the set-self-func)) (the toggle-force-refresh!))
   (set-expand-mode! (mode) (funcall (the set-expand-mode-func) mode))
   (up-root! () (funcall (the up-root-func)))
   (reset-root! () (funcall (the reset-root-func)))))




(define-object geysr-nav (menu-node)

  :input-slots ((id "menu") menu-object (design-mode? nil) (local-assets? t))

  :trickle-down-slots (menu-object design-mode? local-assets?)

  :objects
  ((logo :type 'logo-menu)
   (file :type 'file-menu)
   (edit :type 'edit-menu)
   (tree :type 'tree-menu)
   (mode :type 'mode-menu)
   (view :type 'view-menu)
   (develop :type (if (the menu-object development-mode?)
		      'develop-menu 'null-object))
   ))


(define-object logo-menu (menu-node)
  :input-slots ((label (with-cl-who-string ()
			    ((:img :class "menu-image"
				   :src (format nil "~a/static/gwl/images/logo.png"
						(if (the local-assets?) ""
						    "https://genworks.com"))
				   :alt "G")))))
  :objects ((development :type 'development-menu)))


(define-object development-menu (menu-toggle-menu)
  :input-slots ((label "Development"))
  :computed-slots ((slot-to-toggle :development-mode?)))


(define-object file-menu (menu-node)
  :input-slots ((label "File"))
  :objects ((file-new-menu) (file-open-menu) (file-save-menu)))

(define-object file-new-menu (menu-node)
  :computed-slots ((label "New")))

(define-object file-open-menu (menu-node)
  :computed-slots ((label "Open")))

(define-object file-save-menu (menu-node)
  :computed-slots ((label "Save")))

(define-object edit-menu (menu-node)
  :input-slots ((label "Edit"))
  :objects ((color :type 'edit-color-menu) (line-thickness :type 'edit-line-thickness-menu)))

(define-object edit-color-menu (menu-node)
  :input-slots ((label "Color")))

(define-object edit-line-thickness-menu (menu-node)
  :input-slots ((label "Line Thickness")))

(define-object mode-menu (menu-node)
  :input-slots ((label "Mode")
		(title "Select action (Mode) to be applied to objects clicked in Tree or Inspector"))
  :objects ((add-leaves-menu) (inspect-menu) (break-menu)
	    (update-node-menu)
	    (other-viewport-menu)))

(define-object update-node-menu (set-click-mode-menu)
  :input-slots ((label "Update")
		(title "Update the node to reflect any changed code definitions"))
  :computed-slots ((click-mode-key :update-node)))
  

(define-object other-viewport-menu (menu-node)
  :input-slots ((label "Other Viewport Ops")
		(title "Other Viewport operations such as adding non-leaf nodes"))
  :objects ((add-leaves*-menu) (draw-leaves-menu) (delete-leaves-menu)
	    (add-node-menu)(draw-node-menu)))

(define-object inspect-menu (set-click-mode-menu)
  :input-slots ((label "Inspect")
		(title "Load the Node into the Inspector"))
  :computed-slots ((click-mode-key :inspect)))

(define-object break-menu (set-click-mode-menu)
  :input-slots ((label "Set Self")
		(title "Set `self' to the Node."))
  :computed-slots ((click-mode-key :set-self)))


(define-object delete-leaves-menu (set-click-mode-menu)
  :input-slots ((label "Hide Leaves")
		(title "Remove leaves from display list (must have been added in same way)"))
  :computed-slots ((click-mode-key :delete-leaves)))
  

(define-object add-node-menu (set-click-mode-menu)
  :input-slots ((label "Add Node")
		(title "Clear graphics and add the Node to Graphics Viewport (not any children or leaves)."))
  :computed-slots ((click-mode-key :add-node)))

(define-object draw-node-menu (set-click-mode-menu)
  :input-slots ((label "Draw Node")
		(title "Clear graphics and add the Node to Graphics Viewport (not any children or leaves)."))
  :computed-slots ((click-mode-key :draw-node)))

(define-object add-leaves-menu (set-click-mode-menu)
  :input-slots ((label "Add Leaves")
		(title "Add Leaves to Graphics Viewport as a unit (so they cannot be hidden individually)"))
  :computed-slots ((click-mode-key :add-leaves)))

(define-object add-leaves*-menu (set-click-mode-menu)
  :input-slots ((label "Add Leaves*")
		(title "Add Leaves Individually to Graphics Viewport (so they can be hidden individually)"))
  :computed-slots ((click-mode-key :add-leaves*)))

(define-object draw-leaves-menu (set-click-mode-menu)
  :input-slots ((label "Draw Leaves")
		(title "Clear graphics and add Leaves to Graphics Viewport as a unit."))
  :computed-slots ((click-mode-key :draw-leaves)))

(define-object tree-menu (menu-node)
  :input-slots ((label "Tree")
		(title "Select Tree behavior options"))
  :objects ((set-root-menu :type 'set-click-mode-menu :label "Set Root"
			   :title "Set Root to selected Node."
			   :click-mode-key :set-root)

	    (up-root-menu :type 'menu-function-node :label "Up Root!"
			  :title "Set the parent of current root to be the new root."
			  :function-key :up-root!)
	    
	    (reset-root-menu :type 'menu-function-node :label "Reset Root!"
			     :title "Reset original root node to be root of the tree."
			     :function-key :reset-root!)

	    (expand-mode-menu)))

(define-object expand-mode-menu (menu-node)
  :computed-slots ((label "Expand Mode") (title "Choose how far Tree expands"))
  :objects (
	    (remember :type 'menu-function-node :label "Remember" :title "Remember previous expansion state"
		      :function-key :set-expand-mode! :args (list :remember))

	    (childs :type 'menu-function-node :label "Children" :title "Expand one level down at a time"
		      :function-key :set-expand-mode! :args (list :children))
	    
	    #+nil ;; FLAG -- figure out why the compiler is not giving reserved-word error or warning for 'children'
	    (children :type 'menu-function-node :label "Children" :title "Expand one level down at a time"
		      :function-key :set-expand-mode! :args (list :children))
	    
	    (leaves :type 'menu-function-node :label "Leaves" :title "Expand all the way to the Leaves (if possible)"
		    :function-key :set-expand-mode! :args (list :leaves))
	    (auto-close :type 'menu-function-node :label "Auto-close" :title "Collapse all siblings when expanding"
			:function-key :set-expand-mode! :args (list :auto-close))))


(define-object view-menu (menu-node)
  :input-slots ((label "View"))
  :objects ((camera-point-menu)(menu-divider)
	    (reset-zoom-menu :type (ecase (the menu-object :image-format)
				     ((:png :jpeg) 'menu-function-node)
				     ((:svg :x3dom) 'immediate-function-node))
			     :label "Fit to View!"
			     :function-key (ecase (the menu-object :image-format)
					     ((:png :jpeg) :reset-zoom!)
					     ((:svg :x3dom) nil))
			     :js-text (ecase (the menu-object :image-format)
					((:png :jpeg) nil)
					(:svg "panZoomSVG1.reset();")
					(:x3dom (the menu-object viewport-js-text))))
	    (clear!-menu)
	    (menu-divider-2 :type 'menu-divider) (graphics-format-menu)))



(define-object camera-point-menu (menu-node)
  :computed-slots ((label "Perspective"))
  :objects ((trimetric :type 'menu-function-node :label "Trimetric"
		       :function-key :set-view! :args (list :trimetric))
	    
	    (top :type 'menu-function-node :label "Top"
		 :function-key :set-view! :args (list :top))

	    (front :type 'menu-function-node :label "Front"
		   :function-key :set-view! :args (list :front))

	    (left :type 'menu-function-node :label "Left"
		  :function-key :set-view! :args (list :left))

	    (bottom :type 'menu-function-node :label "Bottom"
		    :function-key :set-view! :args (list :bottom))
	    
	    (rear :type 'menu-function-node :label "Rear"
		  :function-key :set-view! :args (list :rear))

	    (right :type 'menu-function-node :label "Right"
		   :function-key :set-view! :args (list :right))))


(define-object menu-divider (menu-node)
  :computed-slots ((html (with-cl-who-string ()
			   ((:li :onmouseover "hideMenus(event);") :hr)))))


(define-object clear!-menu  (menu-function-node)
  :input-slots ((label "Clear!"))
  :computed-slots ((function-key :clear!)))


(define-object graphics-format-menu (menu-node)
  :input-slots ((label "Graphics Format "))
  :objects ((svg :type 'menu-function-node :label "SVG"
		 :function-key :set-image-format! :args  (list :svg))
	    
	    (x3dom :type 'menu-function-node :label "x3dom"
		   :function-key :set-image-format! :args (list :x3dom))
	    (png  :type 'menu-function-node :label "png"
		  :function-key :set-image-format! :args (list :png))
	    
	    (jpeg  :type 'menu-function-node :label "jpeg"
		   :function-key :set-image-format! :args (list :jpeg))))

(define-object develop-menu (menu-node)
  :input-slots ((label "Develop"))
  :objects ((update! :type 'menu-function-node :label "Update!"
		     :function-key :update-geysr!)
	    (set-self! :type 'menu-function-node :label "Set Self!"
		       :function-key :set-self!)))


(define-object menu-toggle-menu (menu-node)
  :input-slots (slot-to-toggle
		(title (format nil "Toggle the ~a property" (the slot-to-toggle))))

  :computed-slots ((html (with-cl-who-string ()
			   (let ((value (the menu-object (evaluate (the slot-to-toggle)))))
			     (htm ((:li :onmouseover "hideMenus(event);")
				   ((:a :href "#"
					:title (the title)
					:class (when value "li-selected")
					:onclick (unless (the design-mode?)
						   (the menu-object
							(gdl-ajax-call
							 :function-key :set-slot!
							 :arguments (list (the slot-to-toggle)
									  (not value))))))
				    (when value (htm ((:i :class "fas fa-check"))))
				    (str (format nil " ~a" (the label)))))))))))


(define-object set-click-mode-menu (menu-node)
  :input-slots (click-mode-key
		(title (format nil "Set click-mode to ~a" (the click-mode-key))))

  :computed-slots
  ((html (with-cl-who-string ()
	   ((:li :onmouseover "hideMenus(event);")
	    ((:a :href "#"
		 :title (the title)
		 :class (when (eql (the menu-object click-mode) (the click-mode-key))
			  "li-selected")
		 :onclick (unless (the design-mode?)
			    (the menu-object (gdl-ajax-call :function-key :set-click-mode!
							    :arguments (list (the click-mode-key))))))
	     (when (eql (the menu-object click-mode) (the click-mode-key))
	       (htm ((:i :class "fas fa-check"))))
	     (str (format nil " ~a..." (the label)))))))))



(define-object immediate-function-node (menu-node)
  :input-slots (js-text (title nil))
  :computed-slots
  ((html (with-cl-who-string ()
	   ((:li :onmouseover "hideMenus(event);")
	    ((:a :href "#"
		 :title (the title)
		 :onclick (the js-text))
	     (str (format nil " ~a" (the label)))))))))


(define-object menu-function-node (menu-node)
  :input-slots (function-key (args nil)
			     (title nil))
  :computed-slots
  ((html (with-cl-who-string ()
	   (let ((slot (case (the function-key)
			 (:set-image-format! :image-format)
			 (:set-view! :view)
			 (:set-expand-mode! :expand-mode)))
		 (value (first (the args))))
	     (let ((selected? (and slot (eql (the menu-object (evaluate slot)) value)))
		   (additional-script nil)
		   (ajax-call (the menu-object
				   (gdl-ajax-call :function-key (the function-key)
						  :arguments (the args)))))
	       (htm ((:li :onmouseover "hideMenus(event);")
		     ((:a :href "#"
			  :title (the title)
			  :class (when selected? "li-selected")
			  :onclick (unless (the design-mode?)
				     (string-append (or additional-script "") ajax-call)))
		      
		      (when selected? (htm ((:i :class "fas fa-check"))))
		      (str (format nil " ~a" (the label))))))))))))
