@subsubsection Split-surface

@b{Description}

Given a NURBS and a parameter in U or V direction,
split the surface at the parameter and return one section or the other as the 
toplevel self of this instance. Note that both resulting sections are also 
reflected in (the surfaces) sequence which is a hidden child in this object.

As an alternative to a parameter, a projection-point and projection-vector 
can also be given, and the U or V parameter at the resulting surface point
will be used as the parameter.



@noindent @b{Optional-input-slots}

@b{:keep-side}

@itemize {}

 @item Keyword symbol, one of :left or :right. Determines which half of the split
surface to reflect in this instance. Both halves will be reflected in (the surfaces)
hidden-object sequence which is a child of this instance.

@end itemize

@b{:parameter}

@itemize {}

 @item Number. The parameter in U or V direction at which to do the split. This must
lie in the domain between (the u-min) [or (the v-min)] and (the u-max) [or (the v-max)] 
of the surface-in. If it is outside this domain, a warning will be thrown and the 
value will be pinned to the nearest value within the domain.

If this input is not specified and you specify a projection-point and projection-vector,
then this projected point will be used to establish the parameter for splitting. 

@end itemize

@b{:projection-point}

@itemize {}

 @item 3D Point or nil. If given and parameter is not given, 
this point will be projected onto the surface using (the projection-vector) 
to establish the split parameter. Defaults to nil.

@end itemize

@b{:projection-vector}

@itemize {}

 @item 3D Vector or nil. If given and parameter is not given, 
this will be used to project (the projection-point) 
onto the surface to establish the split parameter. 
Defaults to nil.

@end itemize

@b{:surface-in}

@itemize {}

 @item GDL Surface object. The surface to be split.

@end itemize

@b{:u-or-v}

@itemize {}

 @item Keyword symbol, one of :u or :v. Determines the direction of the split.

@end itemize

@noindent @b{Computed-slots}

@b{:projected-point}

@itemize {}

 @item Surface point. Returns the first result of the given point projected 
along the given vector intersected with the surface.

:arguments (point "3D Point. The point to be projected."
            vector "3D Vector. The vector along which to project.")

@end itemize

@b{:projected-points}

@itemize {}

 @item List of Surface points. Returns the given point projected along 
the given vector intersected with the surface.

:arguments (point "3D Point. The point to be projected."
            vector "3D Vector. The vector along which to project.")

@end itemize



@noindent @b{Examples}


@smallexample 
@cartouche

 (in-package :gdl-user)

 (define-object test-split-surface (base-object)
  
   :computed-slots ((projection-point (make-point 10 0 3))
                    (projection-vector (make-vector 1 0 0))
                    (u-or-v :u :settable)
                    (keep-side :left :settable))
  
   :objects
   ((test-surface :type 'test-b-spline-surface
                  :display-controls nil)

   
    (split :type 'split-surface
           :display-controls (list :color :red :line-thickness 3)
           :surface-in (the test-surface)
           :pass-down (keep-side u-or-v projection-point projection-vector))))


 (generate-sample-drawing :object-roots (make-object 'test-split-surface)
                          :projection-direction (getf *standard-views* :trimetric))


@end cartouche 
@end smallexample




 @b{Example image is not generated!}

