@subsubsection Lofted-surface

@b{Description}

Loft of a surface through a list of curves with
various controls. 

@noindent @b{Required-input-slots}

@b{:curves}

@itemize {}

 @item List of GDL Curve objects. The curves through which the surface will be lofted.

@end itemize

@noindent @b{Optional-input-slots}

@b{:rail-1}

@itemize {}

 @item GDL Curve object. Guide rail corresponding to minimum U parameter of 
resulting surface. Defaults to nil.

@end itemize

@b{:rail-1-is-spine?}

@itemize {}

 @item Boolean. If specified as non-nil, then the rail-1 will be used 
as a spine curve similar to what is described on page 462 of the NURBS book. 
Default is nil.

@end itemize

@b{:rail-1-params}

@itemize {}

 @item List of curve parameters. The parameter value on the rail-1 which 
should correspond to each respective profile curve. Defaults to the evenly 
spaced parameters between the u-min and u-max of the rail-1, one for each 
profile curve.

@end itemize

@b{:rail-2}

@itemize {}

 @item GDL Curve object. Guide rail corresponding to maximum U parameter 
of resulting surface. Defaults to nil. If both rail-1 and rail2 are given, 
then they must be synchronized.

@end itemize

@b{:spine}

@itemize {}

 @item GDL Curve object. Curve to use as spine for calling ascssk.

@end itemize

@b{:synchronized?}

@itemize {}

 @item Boolean. Set this to t if the curves already have synchronized control points. 
It makes the lofted-surface much lighter-weight in terms of its control mesh. 
Default is NIL (which means the lofted-surface does not assume synchronized 
control points on the profile curves).

@end itemize

@b{:tolerance}

@itemize {}

 @item Number. The fitting tolerance to fit to the loft curves.
0 means to interpolate exactly. Default is 0

@end itemize

@b{:use-ascssk?}

@itemize {}

 @item Boolean. If non-nil, we use the low-level nlib ascssk directly. If nil, we use
the SMLib make-skinned-surface routine. Default is nil

@end itemize

@b{:v-degree}

@itemize {}

 @item Integer. The degree of the surface in the lofting direction. Defaults to 3.

@end itemize



@noindent @b{Examples}

@smallexample 
@cartouche
                  
 (in-package :surf)

  (define-object test-lofted-surface (base-object)
  
  :input-slots
  ((curves (list (the curve-1) (the curve-2) (the curve-3) (the curve-4)  )))
  
  :objects
  ((lofted-surface :type 'lofted-surface
                   :curves (the curves))
   
   (curve-1 :type 'b-spline-curve
            :display-controls (list :color :red :line-thickness 3)
            :control-points (list (make-point 0 0 0)
                                  (make-point 1 1 0)
                                  (make-point 0 1 0)
                                  (make-point 0 0 0) ))
   
   (curve-2 :type 'b-spline-curve
            :display-controls (list :color :red :line-thickness 3)
            :control-points (list (make-point 0 0 1)
                                  (make-point -1 1 1)
                                  (make-point 0 1 1)
                                  (make-point 0 0 1) ))
           
   (curve-3 :type 'b-spline-curve
            :display-controls (list :color :red :line-thickness 3)
            :control-points (list (make-point 0 0 2)
                                  (make-point -1 -1 2)
                                  (make-point 0 -1 2)
                                  (make-point 0 0 2) ))
   
   (curve-4 :type 'b-spline-curve
            :display-controls (list :color :red :line-thickness 3)
            :control-points (list (make-point 0 0 3)
                                  (make-point 1 -1 3)
                                  (make-point 0 -1 3)
                                  (make-point 0 0 3) ))))

 (generate-sample-drawing :object-roots (make-object 'test-lofted-surface)
                          :projection-direction :trimetric)

 @end cartouche 
@end smallexample



 @b{Example image is not generated!}

