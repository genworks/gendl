@subsubsection Projected-curve

@b{Description}

Creates a 3D curve which is the @i{curve-in} 
projected onto the @i{surface.} according to the @i{projection-vector}. 
The resulting curve contains a uv-curve which is typically useful for trimming.

NOTE: Change from 1577p027 and forward -- the projected curve now is a 3D curve which 
can be drawn. It contains its uv representation on the surface. Previously, the uv-curve
was the actual projected-curve.



@noindent @b{Required-input-slots}

@b{:curve-in}

@itemize {}

 @item GDL NURBS Curve. The curve to be projected to the surface.

@end itemize

@b{:projection-vector}

@itemize {}

 @item 3D Vector. The direction of projection.

@end itemize

@b{:surface}

@itemize {}

 @item GDL NURBS Surface. The surface on which the curve-in is to be projected.

@end itemize

@noindent @b{Optional-input-slots}

@b{:angle-tolerance-radians}

@itemize {}

 @item Number or nil. The angle tolerance used when projecting and creating new curves.
Defaults to nil, which uses the default of the geometry kernel.

@end itemize

@b{:approximation-tolerance}

@itemize {}

 @item Number or nil. The tolerance used when projecting and creating new curves.
Defaults to nil, which uses the default of the geometry kernel.

@end itemize

@noindent @b{Computed-slots}

@b{:built-from}

@itemize {}

 @item GDL Curve. Specify this if you want this curve to be a clone of an existing curve. (note - this uses a shared underlying 
curve object, it does not make a copy)

@end itemize

@noindent @b{Hidden-objects}

@b{:uv-curve}

@itemize {}

 @item GDL UV curve object. The resultant projected-curve in the UV space of the surface.

@end itemize



@noindent @b{Examples}

@smallexample 
@cartouche

 (in-package :surf)

 (define-object test-trimmed-from-projected-2 (trimmed-surface)
  :computed-slots
  ((uv-inputs t)
   (island (the island-3d uv-curve))
   (holes (list (the hole uv-curve)))
   (display-controls (list :color :blue :line-thickness 2)))
  
  :objects
  ((basis-surface :type 'test-fitted-surface
                  :display-controls (list :color :pink)
                  :grid-length 10 :grid-width 10 :grid-height 5
                  )
   
   (raised-hole :type 'b-spline-curve
                :display-controls (list :color :grey-light-very)
                :control-points (list (make-point 3.5 4.5 7)
                                      (make-point 4.5 6 7) 
                                      (make-point 5.5 7 7) 
                                      (make-point 6 4.5 7) 
                                      (make-point 5.5 2 7) 
                                      (make-point 4.5 2 7) 
                                      (make-point 3.5 4.5 7)))

   (raised-island :type 'b-spline-curve
                  :display-controls (list :color :grey-light-very)
                  :control-points (list (make-point 3 5 7)
                                        (make-point 5 8 7) 
                                        (make-point 7 10 7) 
                                        (make-point 8 5 7) 
                                        (make-point 7 0 7) 
                                        (make-point 5 0 7) 
                                        (make-point 3 5 7))))
  :hidden-objects
  ((island-3d :type 'projected-curve
              :curve-in (the raised-island)
              :surface (the basis-surface)
              :projection-vector (make-vector 0 0 -1))
   

   (hole :type 'projected-curve
         :curve-in (the raised-hole)
         :surface (the basis-surface)
         :projection-vector (make-vector 0 0 -1))))


 (generate-sample-drawing :objects (let ((self (make-object 'test-trimmed-from-projected-2)))
                                     (list (the basis-surface) self (the raised-island) (the raised-hole)))
                          :projection-direction :trimetric)


@end cartouche 
@end smallexample



 @b{Example image is not generated!}

