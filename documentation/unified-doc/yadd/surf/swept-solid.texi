@subsubsection Swept-solid

@b{Description}

This primitive will take a brep as input,
and sweep all its faces in the given direction by the given distance,
to produce another brep.

@noindent @b{Required-input-slots}

@b{:distance}

@itemize {}

 @item Number. The distance over which the sweep is desired.

@end itemize

@b{:facial-brep}

@itemize {}

 @item GDL Brep object. The original brep, which can contain one or more faces, planar and/or non-planar.

@end itemize

@b{:vector}

@itemize {}

 @item GDL Vector. The direction in which the sweep is desired.

@end itemize



@noindent @b{Examples}

@smallexample 
@cartouche
 (in-package :gdl-user)

 (define-object swept-solid-example (swept-solid)

   :computed-slots
   ((facial-brep (the trimmed brep))
    (vector (make-vector 0 0 1))
    (distance 10)
    (display-controls (list :isos (list :n-u 8 :n-v 8) :color :blue :transparency 0.3)))

  
   :hidden-objects
   ((rectangle :type 'rectangular-surface
               :width 20 :length 20)

    (trim-curve :type 'global-filleted-polyline-curve
                :vertex-list (list (translate (the center) :right 8 :rear 8)
                                   (translate (the center) :left 8 :rear 8)
                                   (translate (the center) :left 8 :front 8)
                                   (translate (the center) :right 8 :front 8)
                                   (translate (the center) :right 8 :rear 8))
                :default-radius 3)

    (trimmed :type 'trimmed-surface
             :basis-surface (the rectangle)
             :reverse-island? t
             :island (the trim-curve))))

 (generate-sample-drawing :objects (make-object 'swept-solid-example)
                          :projection-direction (getf *standard-views* :trimetric))

@end cartouche 
@end smallexample



 @b{Example image is not generated!}

