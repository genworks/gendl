@subsubsection Fitted-surface

@b{Description}

Fits a surface through a net of points with given degrees and parameterizations. Currently
only interpolated surfaces are supported, this will be extended to allow smooth fitting without the surface necessarily
interpolating (going through) each of the points.

@noindent @b{Required-input-slots}

@b{:points}

@itemize {}

 @item List of lists of 3D Points. The points for fitting, with inner lists representing U direction and outer lists V direction.

@end itemize

@noindent @b{Optional-input-slots}

@b{:c11?}

@itemize {}

 @item Boolean. If interpolated, indicates whether to compute a C11 continuous nonrational bicubic NURBS surface. Defaults to nil.

@end itemize

@b{:interpolant?}

@itemize {}

 @item Boolean. Indicates whether the surface will interpolate the points. Defaults to t.

@end itemize

@b{:normals}

@itemize {}

 @item List of 3D vectors of same length as points, or nil. If given, these are the surface normals at each point.

@end itemize

@b{:parameterization}

@itemize {}

 @item Keyword symbol, one of :uniform, :chord-length, :centripetal. The parameterization to use in the resultant surface if
interpolant? is t. Default is :chord-length

@end itemize

@b{:tangent-method}

@itemize {}

 @item Keyword symbol, one of :bessel, :akima.  The method used to compute tangents. Defaults to :akima.

@end itemize

@b{:tolerance}

@itemize {}

 @item Number. Tolerance for fit. Defaults to *3d-approximation-tolerance-default*.

@end itemize

@b{:u-degree}

@itemize {}

 @item Integer. The desired degree of the resultant surface in the U direction. Default is 3.

@end itemize

@b{:u-start}

@itemize {}

 @item Integer. The starting degree for the fit algorithm in the U direction. Default is 1.

@end itemize

@b{:v-degree}

@itemize {}

 @item Integer. The desired degree of the resultant surface in the V direction. Default is 3.

@end itemize

@b{:v-start}

@itemize {}

 @item Integer. The starting degree for the fit algorithm in the V direction. Default is 1.

@end itemize

@noindent @b{Computed-slots}

@b{:bounding-box}

@itemize {}

 @item List of two 3D points. The left front bottom and right rear top corners, in global coordinates,
of the rectangular volume bounding the tree of geometric objects rooted at this object.

@end itemize

@noindent @b{Examples}

@smallexample 
@cartouche

 (in-package :gdl-user)


 (define-object c11-test (surface) 

  :input-slots () 

  :computed-slots ()

  :objects
  ((surf-test :type 'fitted-surface
              :hidden nil
              :c11? t
              :points (list (list (make-point -1 0 0)
                                  (make-point 0 0 0) 
                                  (make-point 0.001 0.0 0)
                                  (make-point 1 1 0)
                                  (make-point 1.001 1 0)
                                  (make-point 2 1 0)
                                  (make-point 2.001 1 0)
                                  (make-point 3 2 0)
                                  (make-point 3.001 2.001 0)
                                  (make-point 4 3 0) 
                                  (make-point 5 4 0))   
                            (list
                             (make-point -1 0 1)
                             (make-point 0 0 1) 
                             (make-point 0.001 0.0 1)
                             (make-point 1 1 1)
                             (make-point 1.001 1 1)
                             (make-point 2 1 1)
                             (make-point 2.001 1 1)
                             (make-point 3 2 1)
                             (make-point 3.001 2.001 1)
                             (make-point 4 3 1)
                             (make-point 5 4 1))))))


 (define-object test-fitted-surface (fitted-surface) 

   :input-slots
   ((display-controls (list :color :green-spring :isos (list :n-v 19 :n-u 19)))
   
    (grid-width 4 :settable) (grid-length 4 :settable) (grid-height 4 :settable))
  
   :computed-slots
   (
   
    (points (list (list (make-point 0 0 0)
                        (make-point (/ (the grid-width) 4) 0 0)
                        (make-point (half (the grid-width)) 0 0)
                        (make-point (* 3/4 (the grid-width)) 0 0)
                        (make-point (the grid-width) 0 0))
                         
                  (list (make-point 0 (/ (the grid-length) 4) 0)
                        (make-point (/ (the grid-width) 4) (/ (the grid-length) 4) (/ (the grid-height) 4))
                        (make-point (half (the grid-width)) (/ (the grid-length) 4) 
                                    (* (/ (the grid-height) 4) 1.6))
                        (make-point (* 3/4 (the grid-width)) (/ (the grid-length) 4) (/ (the grid-height) 4))
                        (make-point (the grid-width) (/ (the grid-length) 4) 0))
                         
                  (list (make-point 0 (half (the grid-length)) 0)
                        (make-point (/ (the grid-width) 4) (half (the grid-length)) 
                                    (* (/ (the grid-height) 4) 1.8))
                        (make-point (half (the grid-width)) (half (the grid-length)) (the grid-height))
                        (make-point (* 3/4 (the grid-width)) (half (the grid-length)) (* 3/4 (the grid-height)))
                        (make-point (the grid-width) (half (the grid-length)) 0))
                         
                  (list (make-point 0 (* 3/4 (the grid-length)) 0)
                        (make-point (/ (the grid-width) 4) (* 3/4 (the grid-length)) 
                                    (min (* (/ (the grid-height) 4) (* (/ (the grid-height) 4) 1.4)) 
                                         (the grid-height)))
                        (make-point (half (the grid-width)) (* 3/4 (the grid-length)) 
                                    (min (* (/ (the grid-height) 4) (* (/ (the grid-height) 4) 1.8)) 
                                         (the grid-height)))
                        (make-point (* 3/4 (the grid-width)) (* 3/4 (the grid-length)) 
                                    (/ (the grid-height) 4))
                        (make-point (the grid-width) (* 3/4 (the grid-length)) 0))
                         
                  (list (make-point 0 (the grid-length) 0)
                        (make-point (/ (the grid-width) 4) (the grid-length) 0)
                        (make-point (half (the grid-width)) (the grid-length) 0)
                        (make-point (* 3/4 (the grid-width)) (the grid-length) 0)
                        (make-point (the grid-width) (the grid-length) 0))))))

 (generate-sample-drawing :objects (make-object 'test-fitted-surface)
                          :projection-direction :trimetric)


 @end cartouche 
@end smallexample



 @b{Example image is not generated!}

