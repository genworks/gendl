@subsubsection Global-filleted-polyline-curves

@b{Description}

Produces a list of linear-curves and arc-curves which represent the straight sections
and fillets of a global-filleted-polyline. Note also global-filleted-polyline-curve, which composes the segments together 
into a single curve.

@noindent @b{Computed-slots}

@b{:ordered-curves}

@itemize {}

 @item List of GDL NURBS curve objects. The curve segments in the right order for chaining together.

@end itemize

@noindent @b{Quantified-hidden-objects}

@b{:fillet-curves}

@itemize {}

 @item GDL Sequence of GDL NURBS curve objects. The arc-curves representing the fillets.

@end itemize

@b{:straight-curves}

@itemize {}

 @item GDL Sequence of GDL NURBS curve objects. The linear-curves representing the straights.

@end itemize

@noindent @b{Examples}

@smallexample 
@cartouche

 (in-package :surf)

 (define-object test-global-filleted-polyline-curves (global-filleted-polyline-curves)
                    
  :computed-slots
  ((default-radius 5)
   (vertex-list (list (make-point 0 0 0)
                      (make-point 10 10 0)
                      (make-point 30 10 0)
                      (make-point 40 0 0)
                      (make-point 30 -10 0)
                      (make-point 10 -10 0)
                      (make-point 0 0 0))))

  :hidden-objects
  ((points :type 'point
           :sequence (:size (length (rest (the vertex-list))))
           :center (nth (the-child index) (rest (the vertex-list))))

   (view :type 'base-view
         :page-width (* 5 72) :page-height (* 5 72)
         :objects (cons self (list-elements (the points))))))

 (with-format (pdf "/tmp/example.pdf" :page-width (* 5 72) :page-length (* 5 72))
    (let ((obj (make-object 'test-global-filleted-polyline-curves)))
      (write-the-object obj view cad-output)))

@end cartouche 
@end smallexample



 @b{Example image is not generated!}

