@subsubsection Curve

@b{Description}

A generalized NURBS curve. Usually used as a mixin in more specific curves.

@noindent @b{Optional-input-slots}

@b{:built-from}

@itemize {}

 @item GDL Curve. Specify this if you want this curve to be a clone of an existing curve. (note - this uses a shared underlying 
curve object, it does not make a copy)

@end itemize

@b{:uv-curve}

@itemize {}

 @item GDL Curve object. The corresponding UV curve for the primary surface on which this curve lies, if any. If
this is not a surface-curve, this will return an error.

@end itemize



@noindent @b{Settable-defaulted-input-slots}

@b{:tolerance}

@itemize {}

 @item Number. Approximation tolerance for display purposes. Defaults to the tolerance of the 
built-from curve, if one exists, otherwise defaults to the *display-tolerance*.

@end itemize

@noindent @b{Computed-slots}

@b{:bounding-box}

@itemize {}

 @item List of two 3D points. The left front bottom and right rear top corners, in global coordinates,
of the rectangular volume bounding the tree of geometric objects rooted at this object.

@end itemize

@b{:direction-vector}

@itemize {}

 @item 3D Vector. The direction pointing from the start to the end.

@end itemize

@b{:end}

@itemize {}

 @item 3D Point. The point returned by evaluating the curve function at u2.

@end itemize

@b{:on-surfaces}

@itemize {}

 @item List of GDL surfaces. The surfaces on which this curve lies.

@end itemize

@b{:start}

@itemize {}

 @item 3D Point. The point returned by evaluating the curve function at u1.

@end itemize

@b{:success?}

@itemize {}

 @item Boolean. This will be t if the curve is generated successfully, nil otherwise.

@end itemize

@b{:u-max}

@itemize {}

 @item Number. The highest parameter value of the underlying mathematical definition for this parametric curve

@end itemize

@b{:u-min}

@itemize {}

 @item Number. The lowest parameter value of the underlying mathematical definition for this parametric curve

@end itemize

@b{:u1}

@itemize {}

 @item Number. Equal to the natural u-min of the curve.

@end itemize

@b{:u2}

@itemize {}

 @item Number. Equal to the natural u-max of the curve.

@end itemize

@noindent @b{Hidden-objects}

@b{:first-derivative}

@itemize {}

 @item GDL Curve. The first derivative of this curve. The degree will be one less than the degree of this curve.

@end itemize

@b{:second-derivative}

@itemize {}

 @item GDL Curve. The second derivative of this curve. The degree will be two less than the degree of this curve.

@end itemize



@noindent @b{Functions}

@b{:acceleration}

@itemize {}

 @item 3D Vector. The given parameter evaluated on the second derivative curve of this curve. Note that this is
only valid if this curve has degree of at least two (2), and will throw an error otherwise.

:arguments (parameter "Number. The desired parameter to be evaluated on the second derivative curve.")

@end itemize

@b{:b-spline-data}

@itemize {}

 @item List of 3D points, List of numbers, List of numbers, and integer. Returns four values which are
the control points, the weights, the knots, and the degree of the curve.

@end itemize

@b{:check-continuity}

@itemize {}

 @item Either T or a plist of numbers with keys :distance, angle, :length. 

:&key ((3d-tolerance *3d-tolerance-default*) "Allowed maximum distance between curve segments."
       (angle-tolerance *angle-tolerance-default) "Allowed maximum angle in radians between end/start tangents of curve segments."
       (minimum-segment-length *minimum-segment-length-default*) "Allowed minimum curve segment length.")

@end itemize

@b{:closure}

@itemize {}

 @item Keyword symbol, :closed, :open, or :continuous. :continuous if ends are within *3d-tolerance-default* and tangents 
are within *angle-tolerance-default*, :closed if ends are within *3d-tolerance-default* but tangents are
not within *angle-tolerance-default*, and :open if ends are not within *3d-tolerance-default*.

@end itemize

@b{:curvature}

@itemize {}

 @item Number. The reciprocal of the radius of curvature at the given parameter.

@end itemize

@b{:curve-intersection-point}

@itemize {}

 @item Surface Point.  First point of intersection between this curve and the other curve given as the argument.

This function also returns a second value, which is a surface point representing the end of 
a contiguous segment, if any, associated with the surface point given as the primary return value.
A NIL value as this second return value indicates that there was no contiguous segment, only an 
intersecting point as indicated by the surface point given as the primary return value.

:arguments (other-curve "GDL Curve. The curve with which to intersect.")
:&key ((distance-tolerance *3d-tolerance-default*) "Number. Distance for two points to be considered coincident.")
:note use get-parameter-of and get-3d-point-of to extract components of a surface point.

@end itemize

@b{:curve-intersection-points}

@itemize {}

 @item Surface Points.  Points of intersection between this curve and another curve.

This function also returns a second value, which is a list of surface points representing the ends of 
contiguous segments, if any, associated with the surface point in the same position in the primary returned list. 
NIL values in this second returned list indicate that there was no contiguous segment, only an intersecting point 
as indicated by the surface point in the primary returned list.

:arguments (other-curve "GDL Curve. The curve with which to intersect.")
:&key ((distance-tolerance *3d-tolerance-default*) "Number. Distance for two points to be considered coincident.")
:note use get-parameter-of, get-3d-point-of, and get-uv-point-of to extract 
components of a surface point.

@end itemize

@b{:dropped-curve}

@itemize {}

 @item List of Plists. The returned list of plists contains information about the points where the tangents of this curve and those of the curve given as the argument
are equal.

:arguments (curve "GDL Curve object")

@end itemize

@b{:dropped-point}

@itemize {}

 @item Surface Point. Given a 3D point, returns the point(s) projected normally onto the curve.

:&key ((distance-tolerance [covers entire curve]) "Number. The 3D point must be within this distance of the curve for a successful drop.")

@end itemize

@b{:equi-spaced-parameters}

@itemize {}

 @item List of Numbers. Returns the specified number of parameters equally spaced along the curve.

:arguments (number "Number. How many parameters to return.")

:&key ((spacing :arc-length) "Keyword Symbol, :parametric or :arc-length. :arc-length is the default")

@end itemize

@b{:equi-spaced-points}

@itemize {}

 @item List of 3D Points. Returns the specified number of points equally spaced along the curve.

:arguments (number "Number. How many points to return.")

:&key ((spacing :arc-length) "Keyword Symbol, :parametric or :arc-length. Defaults to :arc-length."
       (arc-length-approximation-tolerance *zero-epsilon*) "Number. A smaller number gives tighter arc 
length approximation. Scaled to curve exent.")

@end itemize

@b{:in-plane?}

@itemize {}

 @item Boolean. Given a point and a vector defining a plane, returns T or NIL depending whether this curve lies in the plane.
     Also returns a second value which is the maximum distance of the curve from the plane.

    :arguments (plane-point "3d-point. Point on the plane"
                plane-normal "3d-vector. Normal vector of the plane")
    :&key ((distance-tolerance *3d-tolerance-default*) "Number. Allowed distance of any point on the curve from the plane.")

@end itemize

@b{:local-bounding-box}

@itemize {}

 @item Returns a bbox object, answering xmin, ymin, zmin, xmax, ymax, and zmax, for a box containing the convex hull
 (i.e. the control points) of this curve and oriented according to the given center and orientation.

@end itemize

@b{:maximum-distance-to-curve}

@itemize {}

 @item Plist. The returned plist contains information about the maximum distance from this curve to the curve given as the argument.

:arguments (curve "GDL Curve object")

@end itemize

@b{:maximum-distance-to-point}

@itemize {}

 @item Plist. The returned plist contains information about the maximum distance from this curve to the point given as the argument.

:arguments (point "3D Point")

@end itemize

@b{:minimum-distance-to-curve}

@itemize {}

 @item Plist. The returned plist contains information about the minimum distance from this curve to the curve given as the argument.

:arguments (curve "GDL Curve object")

@end itemize

@b{:minimum-distance-to-point}

@itemize {}

 @item Plist. The returned plist contains information about the minimum distance from this curve to the point given as the argument.

:arguments (point "3D Point")

@end itemize

@b{:minimum-radius}

@itemize {}

 @item Number. The minimum radius of curvature for the curve. A second value is also returned, which is a surface point indicating
the point on the curve where this minimum radius occurs. A third value is also returned, which is a list of additional curve
parameters where similar minimum radii occur.

@end itemize

@b{:normal}

@itemize {}

 @item 3D Vector. The normal of the curve at the given parameter value, i.e. the vector pointing from the point 
on the curve at this parameter to the center of the osculating circle at that point. if the curve has no 
curvature at the given parameter, NIL is returned.

:arguments (parameter "Number. The desired parameter to be evaluated on the curve.")

@end itemize

@b{:offset-point-along}

@itemize {}

 @item Surface point. Returns point at given parameter offset by given distance.

:arguments (curve-parameter "Number. The curve parameter to start from"
            distance "Number. The distance to offset")

@end itemize

@b{:on?}

@itemize {}

 @item Boolean. Returns non-NIL if the given parameter lies within the parameter range of this curve.

:arguments (parameter "Number. The parameter to be tested.")

@end itemize

@b{:parameter-at-length}

@itemize {}

 @item Number. Returns the parameter representing a point offset from the start of the curve by the given length.

:arguments (distance "Number. The arc length from the start.")

@end itemize

@b{:parameter-at-point}

@itemize {}

 @item Number. Returns the parameter of the given point on the curve.
     :arguments (point "Point. The point of which the parameter should be calculated.")

@end itemize

@b{:parameter-bounds}

@itemize {}

 @item Numbers (multiple return values). The minimum and maximum parameter values for this parametric curve.

@end itemize

@b{:plane-intersection-point}

@itemize {}

 @item Surface Point.  First point of intersection between this curve and the plane denoted by plane-point and plane-normal

:note use get-parameter-of and get-3d-point-of to extract components of a surface point.

@end itemize

@b{:plane-intersection-points}

@itemize {}

 @item Surface Points.  Points of intersection between this curve and the plane denoted by plane-point and plane-normal.

:note use get-parameter-of and get-3d-point-of to extract components of a surface point.

@end itemize

@b{:point}

@itemize {}

 @item 3D Point. The point on the curve corresponding to the given parameter value.

:arguments (parameter "Number. The desired parameter to be evaluated on the curve.")

@end itemize

@b{:radius-of-curvature}

@itemize {}

 @item Number. The radius of curvature (i.e. radius of the osculating circle) at the given parameter.

:arguments (parameter "Number. The parameter at which to compute radius of curvature")

@end itemize

@b{:surface-intersection-point}

@itemize {}

 @item Surface point. Returns the first point of intersection between this curve and the surface given as an argument.

:arguments (surface "GDL Surface object. The surface to intersect with this curve.")
:&key ((3d-tolerance *3d-tolerance-default*) "Number. The tolerance to use for intersecting.")

@end itemize

@b{:surface-intersection-points}

@itemize {}

 @item List of Surface points. Returns the point(s) of intersection between this curve and the surface given as an argument.

:arguments (surface "GDL Surface object. The surface to intersect with this curve.")
:&key ((3d-tolerance *3d-tolerance-default*) "Number. The tolerance to use for intersecting.")

@end itemize

@b{:tangent}

@itemize {}

 @item 3D Vector. The curve tangent at the given parameter value. Supplementary values returned
are: the 3D point at the parameter value. If keyword argument :include-curvature?</tt?> is given as non-NIL, 
the radius of the osculating circle, the center for the osculating circle, the normal for the osculating circle, 
and the curve normal are also returned. Note: If :include-curvature?</tt?> is given as non-NIL and the curve 
has no curvature at the specified parameter, NIL is returned for each of these four values.

:arguments (parameter "Number. The desired parameter to be evaluated on the curve.")
:&key ((include-curvature? nil) "Boolean (T or NIL). Indicates whether to compute curvature information.")

@end itemize

@b{:tangent-points}

@itemize {}

 @item List of Plists. The returned list of plists contains information about the points where the tangents of this curve and the vector given as the argument
are equal.

:arguments (vector "GDL Vector")

@end itemize

@b{:total-length}

@itemize {}

 @item Number. The total length of the curve from given start-parameter to given end-parameter.

:&key ((u1 (the u1)) "Number. The start parameter for computing the length"
       (u2 (the u2)) "Number. The end parameter for computing the length"
       (tolerance 0.01) "Number. The tolerance (absolute or relative to curve extent) for computing the length"
       (tolerance-type :relative) "Keyword Symbol, :relative or :absolute. The type of the specified tolerance")

@end itemize

@b{:trim}

@itemize {}

 @item GDL Curve object. Returns a curve which is trimmed from parameter-1 to parameter-2.

:arguments (parameter-1 "Number. The start parameter"
            parameter-2 "Number. The end parameter")

@end itemize

@noindent @b{Examples}

@smallexample 
@cartouche
 
 (in-package :surf)

 (define-object test-curve (curve)
  
  :input-slots
  ((built-from (the curv-in)))
  
  :computed-slots
   ((control-pts (list (make-point 3 5 1)
                       (make-point 5 8.0 1) 
                       (make-point 7 10.0 1) 
                       (make-point 8 5.0 1) 
                       (make-point 7 0.0 1) 
                       (make-point 5 0.0 1) 
                       (make-point 3 5 1))))
   
   :hidden-objects
    ((curv-in  :type 'b-spline-curve
              :control-points (the control-pts))
             
    ))

  (generate-sample-drawing :object-roots (make-object 'test-curve)
                         :projection-direction :top)
  @end cartouche 
@end smallexample



 @b{Example image is not generated!}

