@subsubsection Planar-section-curves

@b{Description}

Produces multiple curves by sectioning a surface or a brep with a plane.
If a single result is expected, use planar-section-curve instead.

@noindent @b{Optional-input-slots}

@b{:3d-approximation-tolerance}

@itemize {}

 @item Number. Tolerance used when approximating in e.g. Newton-Raphson iterations.
Default is *3d-approximation-tolerance-default*.

@end itemize

@b{:angle-tolerance-radians}

@itemize {}

 @item Number. Angular tolerance (in radians) used when approximating in e.g. Newton-Raphson iterations.
Default is *angle-tolerance-radians-default*.

@end itemize

@b{:brep}

@itemize {}

 @item GDL Brep object. The brep to be sectioned with a plane. Specify this or surface, not both.

@end itemize

@b{:plane-normal}

@itemize {}

 @item Vector. The normal of the sectioning plane. Defaults to the top vector of the local reference box.

@end itemize

@b{:plane-point}

@itemize {}

 @item 3D Point. A point on the sectioning plane. Defaults to the center.

@end itemize

@b{:surface}

@itemize {}

 @item GDL Surface object. The surface to be sectioned with a plane. Specify this or brep, not both.

@end itemize

@noindent @b{Computed-slots}

@b{:3d-approximation-tolerance-achieved}

@itemize {}

 @item Number. The actual tolerance achieved by the operation.

@end itemize

@b{:angle-tolerance-radians-achieved}

@itemize {}

 @item Number. The actual angle tolerance achieved by the operation.

@end itemize

@noindent @b{Quantified-objects}

@b{:curves}

@itemize {}

 @item Sequence of GDL Curve Objects. The curves resulting from sectioning.

@end itemize

@b{:uv-curves}

@itemize {}

 @item Sequence of GDL uv curve objects. The UV curves for each returned curve. This is also passed into each 
curve object and available from there.

@end itemize

@noindent @b{Examples}

@smallexample 
@cartouche

 (in-package :surf)
 
 (define-object test-planar-section-curves (base-object)
  
  :computed-slots
  ((points-data '(((0 0 0)(0 1 0)(1 1 0)(1 0 0))
                  ((0 0 1) (0 1 1) (1 1 1) (1 0 1) )
                  ((0 0 2) (0 1 2) (1 1 2) (1 0 2) )
                  ((0 0 3) (0 1 3) (1 1 3) (1 0 3) )))
   
   (control-points (mapcar #'(lambda(list) (mapcar #'apply-make-point list)) (the points-data))))
   
  :objects
  ((planar-section-curve :type 'planar-section-curves
                         :surface (the test-surf)
                         :plane-normal (the (face-normal-vector :front))
                         :plane-point (make-point 0 0.5 0)
                         :display-controls (list :color :red :line-thickness 4))
   
   (test-surf :type 'b-spline-surface 
               :control-points (the control-points)) ))

 (generate-sample-drawing :object-roots (list (make-object 'test-planar-section-curves))
                           :projection-direction (getf *standard-views* :trimetric))

 @end cartouche 
@end smallexample



 @b{Example image is not generated!}

