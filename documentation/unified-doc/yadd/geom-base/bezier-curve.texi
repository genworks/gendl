@subsubsection Bezier-curve

@b{Description}

GDL currently supports third-degree Bezier curves, which are 
defined using four 3D @i{control-points} . The Bezier curve always passes 
through the first and last control points and lies within the convex hull of the control 
points. At the start point (i.e. the first control point), the curve is tangent 
to the vector pointing from the start point to the second control point. 
At the end point (i.e. the last control point), the curve is tangent to the 
vector pointing from the end point to the third control point.

@noindent @b{Required-input-slots}

@b{:control-points}

@itemize {}

 @item List of 4 3D Points. Specifies the control points for the Bezier curve.

@end itemize



@noindent @b{Computed-slots}

@b{:bounding-box}

@itemize {}

 @item List of two 3D points. The left front bottom and right rear top corners, in global coordinates,
of the rectangular volume bounding the tree of geometric objects rooted at this object.

@end itemize



@noindent @b{Functions}

@b{:circle-intersection-2D}

@itemize {}

 @item List of 3D points. Returns points of intersection in the Z plane between this Bezier curve and 
the circle in the Z plane with center center and radius radius.

:arguments (center "3D Point. The center of the circle to be intersected."
            radius "Number. The radius of the circle to be intersected.")

:&key ((accuracy (* 10.0 double-float-epsilon)) "Number. Target accuracy."
      (maximum-number-of-iterations 30) "Integer. Maximum iterations of polynomial solver.")

@end itemize

@b{:line-intersection-2D}

@itemize {}

 @item List of 3D points. Returns points of intersection in the Z plane between this Bezier curve 
and the infinite line containing point point and direction vector. Use the 
between? function if you wish to establish whether the point is contained in a particular line 
segment.

:arguments (point "3D Point. Any point in the line to be intersected."
            vector "3D Vector. The direction of the line to be intersected.")

:&key ((accuracy (* 10.0 double-float-epsilon)) "Number. Target accuracy."
      (maximum-number-of-iterations 30) "Integer. Maximum iterations of polynomial solver.")

@end itemize

@b{:point}

@itemize {}

 @item 3D Point. Returns the point on this Bezier curve corresponding to the given parameter,
     which should be between 0 and 1.

:arguments (parameter "Number. Curve parameter, between zero and one (0 and 1).")

@end itemize

@noindent @b{Examples}

@smallexample 
@cartouche
 (in-package :gdl-user)

 (define-object bezier-sample (bezier-curve)
  :computed-slots
  ((control-points (list (make-point 0 0 0)
                         (make-point 1 1 0)
                         (make-point 2 1 0)
                         (make-point 3 0 0))))
  :objects
  ((points-display :type 'points-display
                   :points (the control-points))))

 (generate-sample-drawing :objects (let ((self (make-object 'bezier-sample)))
                                     (list self (the points-display))))
@end cartouche 
@end smallexample

@center @image{/home/dcooper8/gdl-build/teodor-gelu/genworks-gdl/documentation/unified-doc/yadd/geom-base/image/bezier-curve,,4.2in}

