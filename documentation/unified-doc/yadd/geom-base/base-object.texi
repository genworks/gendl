@subsubsection Base-object

@b{Description}

Base-Object is a superclass of most of GDL's geometric primitives. It 
provides an imaginary geometric reference box with a length, width, height, center, 
and orientation.

@noindent @b{Optional-input-slots}

@b{:bounding-box}

@itemize {}

 @item List of two 3D points. The left front bottom and right rear top corners, in global coordinates,
of the rectangular volume bounding the tree of geometric objects rooted at this object.

@end itemize

@b{:image-file}

@itemize {}

 @item Pathname or string. Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil

@end itemize

@b{:local-box}

@itemize {}

 @item List of two 3D points. The left front bottom and right rear top corners, in global coordinates,
of the rectangular volume bounding this geometric object.

@end itemize

@b{:obliqueness}

@itemize {}

 @item 3x3 Orthonormal Matrix of Double-Float Numbers. This is synonymous with the orientation.

@end itemize

@noindent @b{Defaulted-input-slots}

@b{:center}

@itemize {}

 @item 3D Point. Indicates in global coordinates where the center of the reference 
box of this object should be located.

@end itemize

@b{:display-controls}

@itemize {}

 @item Plist. May contain keywords and values indicating display characteristics for
 this object. The following keywords are recognized currently:
 
 @itemize {} 
 @item :color
 @itemize @minus  color keyword from the *color-table* parameter, or an HTML-style hexidecimal
RGB string value, e.g. "#FFFFFF" for pure white. Defaults to :black.
@end itemize 


 @item :line-thickness
  @itemize @minus  an integer, defaulting to 1, indicating relative line thickness for wireframe
representations of this object.
@end itemize 


 @item :dash-pattern
 @itemize @minus (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length,
 in pixels, of the dashes and blank spaces in a dashed line. The optional third number
 indicates how far into the line or curve to start the dash pattern.
@end itemize 



@end itemize 



@end itemize

@b{:height}

@itemize {}

 @item Number. Z-axis dimension of the reference box. Defaults to zero.

@end itemize

@b{:length}

@itemize {}

 @item Number. Y-axis dimension of the reference box. Defaults to zero.

@end itemize

@b{:orientation}

@itemize {}

 @item 3x3 Matrix of Double-Float Numbers. Indicates the absolute Rotation Matrix used to create 
the coordinate system of this object. This matrix is given in absolute terms (i.e. with 
respect to the root's orientation), and is generally created with the alignment function. 
It should be an @i{orthonormal}  matrix, meaning each row is a vector with a magnitude 
of one (1.0).


@end itemize

@b{:width}

@itemize {}

 @item Number. X-axis dimension of the reference box. Defaults to zero.

@end itemize

@noindent @b{Computed-slots}

@b{:color-decimal}

@itemize {}

 @item Vector of three real numbers. The RBG color of this object specified in :display-controls. 
Defaults to the foreground color specified in *colors-default*. This message should not normally be overridden in user application code.

@end itemize

@b{:local-center}

@itemize {}

 @item 3D Point. The center of this object, from the perspective of the parent. Starting
from the parent's center and using the parent's orientation, this is the relative center
of this object.


@end itemize

@b{:local-orientation}

@itemize {}

 @item 3x3 Matrix of Double-Float Numbers. Indicates the local Rotation Matrix used 
to create the coordinate system of this object. This is the ``local'' 
orientation with respect to the parent. Multiplying the parent's orientation 
with this matrix will always result in the absolute orientation for this part.

 :note An orientation of NIL indicates the 3x3 identity matrix.



@end itemize

@noindent @b{Hidden-objects}

@b{:bounding-bbox}

@itemize {}

 @item GDL object of type Box. A box representing the bounding-box.

@end itemize

@b{:local-bbox}

@itemize {}

 @item GDL object of type Box. A box representing the local-box.

@end itemize



@noindent @b{Functions}

@b{:axis-vector}

@itemize {}

 @item 3D Vector. Returns the vector pointing in the positive direction of the specified axis of this object's reference box.
:arguments (axis "Keyword. One of the standard axis keywords: :lateral, :longitudinal, :vertical.")

@end itemize

@b{:edge-center}

@itemize {}

 @item 3D Point. Returns the center of the requested edge of this object's reference box.
:arguments (direction-1 "Keyword. One of the standard direction keywords: :right, :left, :rear, :front, :top, :bottom."
            direction-2 "Keyword. A standard direction keyword orthogonal to direction-1.")

@end itemize

@b{:face-center}

@itemize {}

 @item 3D Point. Returns the center of the requested face of this object's reference box.
:arguments (direction "Keyword. One of the standard direction keywords: :right, :left, :rear, :front, :top, :bottom.")

@end itemize

@b{:face-normal-vector}

@itemize {}

 @item 3D Vector. Returns the vector pointing from this object's reference box center to its requested face-center.
:arguments (axis "Keyword. One of the standard direction keywords: :right, :left, :rear, :front, :top, :bottom.")

@end itemize

@b{:face-vertices}

@itemize {}

 @item List of four 3D points. Returns the vertices of the indicated face.

:arguments (direction "Direction keyword, e.g. :top, :bottom etc. Indicates for which face to return the vertices.")



@end itemize

@b{:global-to-local}

@itemize {}

 @item 
3D-point. This function returns the point given in global coordinates, into relative local coordinates,
based on the orientation and center of the object to which the global-to-local message is sent.

:arguments (point "3D-point. The point to be converted to local coordinates")

:examples  Please see the examples area.

@end itemize

@b{:in-face?}

@itemize {}

 @item Boolean. Returns non-nil if the given point is in halfspace defined by the plane given a point and direction.

:arguments (point "3D point. a point in the plane"
            direction "3D vector. The normal of the plane")


@end itemize

@b{:line-intersection-points}

@itemize {}

 @item List of 3D points. Returns the points of intersection between given line and the reference box of this object.

:arguments (p-line "3D point. A point in the line"
            u-line "3D vector. The direction vector of the line")



@end itemize

@b{:local-to-global}

@itemize {}

 @item 3D-point. This function returns the point given in relative local coordinates, converted into global coordinates,
based on the orientation and center of the object to which the local-to-global message is sent.

:arguments (point "3D-point. The local point to be converted to global coordinates")

:examples  Please see the examples area.



@end itemize

@b{:vertex}

@itemize {}

 @item 3D Point. Returns the center of the requested vertex (corner) of this object's reference box.
:arguments (direction-1 "Keyword. One of the standard direction keywords: :right, :left, :rear, :front, :top, :bottom."
            direction-2 "Keyword. A standard direction keyword orthogonal to direction-1."
            direction-3 "Keyword. A standard direction keyword orthogonal to direction-1 and direction-2.")

@end itemize

@noindent @b{Examples}

@smallexample 
@cartouche

 (in-package :gdl-user)

 (define-object tower (base-object)
  
  :input-slots 
   ((number-of-blocks 50) (twist-per-block 1)
    (block-height 1) (block-width 5) (block-length 7))
  
  :objects
   ((blocks :type 'box
            :sequence (:size (the number-of-blocks))
            :center (translate (the center) 
                               :up (* (the-child index) 
                                      (the-child height)))
            :width (the block-width) 
            :height (the block-height) 
            :length (the block-length)
            :orientation (alignment 
                          :rear (if (the-child first?)
                                    (rotate-vector-d (the (face-normal-vector  :rear))
                                                     (the twist-per-block)
                                                     (the (face-normal-vector :top)))
                                    (rotate-vector-d (the-child previous 
                                                     (face-normal-vector :rear))
                                                     (the twist-per-block)
                                                     (the (face-normal-vector :top))))
                          :top (the (face-normal-vector :top))))))
;;
;;Test run
;;
#|
gdl-user(46): (setq self (make-object 'tower))
#&lt;tower (at) #x750666f2&gt;
gdl-user(47): (setq test-center (the (blocks 10) center))
#(0.0 0.0 10.0)
gdl-user(48): (the (blocks 10) (global-to-local test-center))
#(0.0 0.0 0.0)
gdl-user(49): (the (blocks 10) (local-to-global (the (blocks 10) 
                                                (global-to-local test-center))))
#(0.0 0.0 10.0)
gdl-user(50): 
gdl-user(50): (setq test-vertex (the (blocks 10) (vertex :top :right :rear)))
#(1.7862364748012536 3.9127176305081863 10.5)
gdl-user(51): (the (blocks 10) (global-to-local test-vertex))
#(2.500000000000001 3.500000000000001 0.5)
gdl-user(52): (the (blocks 10) (local-to-global (the (blocks 10) 
                                                (global-to-local test-vertex))))
#(1.786236474801254 3.9127176305081877 10.5)
gdl-user(53): 
|#
;;
;;
;;

@end cartouche 
@end smallexample

@center @image{/home/dcooper8/gdl-build/teodor-gelu/genworks-gdl/documentation/unified-doc/yadd/geom-base/image/base-object,,4.2in}

