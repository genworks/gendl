@subsubsection Base-ajax-sheet

@b{Description}

(Note: this documentation will be moved
to the specific docs for the html-format/base-ajax-sheet lens, when 
we have lens documentation working properly)

Produces a standard main-sheet for html-format which includes the
standard GDL Javascript to enable code produced with gdl-ajax-call to
work, and optionally to include the standard JQuery library.

If you want to define your own main-sheet, then there is no use for
base-ajax-sheet, you can just use base-html-sheet. But then you have
to include any needed Javascript yourself, e.g. for gdl-ajax-call
support or jQuery.

The html-format lens for base-ajax-sheet also defines a user hook function,
main-sheet-body, which produces a "No Body has been defined" message by default, 
but which you can fill in your own specific lens to do something useful for the body.

@noindent @b{Optional-input-slots}

@b{:body-class}

@itemize {}

 @item String or nil. Names the value of class attribute for the body tag. Default is nil.

@end itemize

@b{:doctype-string}

@itemize {}

 @item String or nil. Contains the string for the doctype at the top of the document. Default is:
 
  ""


@end itemize

@b{:main-sheet-body}

@itemize {}

 @item String of HTML. The main body of the page. 
This can be specified as input or overridden in subclass, otherwise it defaults
to the content produced by the :output-function of the same name 
in the applicable lens for  html-format.

@end itemize

@b{:title}

@itemize {}

 @item String. The title of the web page. Defaults to "Genworks GDL -"
.followed by the strings-for-display.

@end itemize

@noindent @b{Settable-optional-input-slots}

@b{:additional-header-content}

@itemize {}

 @item String of valid HTML. Additional tag content to go into the page header,
if you use the default main-sheet message and just fill in your own main-sheet-body, as 
is the intended use of the base-ajax-sheet primitive.

@end itemize

@b{:additional-header-js-content}

@itemize {}

 @item valid javascript. This javascript is added to the head of the page -just before- the body. 
                  When jquery is loaded (by setting the input-slot (use-jquery t)), the javascript can use the 
                  '$([selector])' shortcuts to do the magic. The javascript is automagically wrapped in the
                  appropriate html tags to ensure a good execution by the javascript engine. When the use-jquery
                  slot is true (t) than the javascript is wrapped in a '$(document).ready' function as a 
                  Good Practice&#0153;.
:example-1 when use-jquery is set to true (t)
<pre>$('ul#menu').superfish({delay:1,speed:'fast'}) ;</pre> results in the following piece of HTML added 
just before the body.
<pre>&lt;script type='text/javascript'&gt;
  $(document).ready(function () {
    $('ul#menu').superfish({delay:1,speed:'fast'}) ;
  });
&lt;/script&gt;</pre>
:example-2 when use-jquery is set to nil (false, not loaded)
<pre>function initMenu({
    // do javascript magic here.
  });</pre> results in the following piece of HTML added just before the body.
<pre>&lt;script type='text/javascript' language='Javascript'&gt;
  function initMenu({
    // do javascript magic here.
  });
&lt;/script&gt;</pre>


@end itemize

@b{:ui-specific-layout-js}

@itemize {}

 @item Absolute URI in the browser to application User Interface (UI) Specific jQuery Layout JavaScript. 
This is additional JavaScript that needs to be loaded in order to initiate the layout of a user 
interface. GDL uses the jQuery Layout plugin (<a href='http://layout.jquery-dev.net/documentation.html' target='new'>
http://layout.jquery-dev.net/documentation.html</a>) to construct a layout. The HTML part of the user interface 
is normally defined in a the main-sheet-body, a lens of the main assembly. This input slot defaults to 
/static/gwl/js/tasty-initlayout-3.js. You can check this file as a reference for your own application 
UI specific jQuery Layout JavaScript.

@end itemize

@b{:use-jquery?}

@itemize {}

 @item Boolean. Include jquery javascript libraries in the page header? 
Default nil.

@end itemize





@noindent @b{Examples}

@smallexample 
@cartouche

 (in-package :gdl-user)

 (gwl:define-package :ajax-test (:export #:assembly))


 (in-package :ajax-test)

 (define-object assembly (base-ajax-sheet)

   :objects
   ((inputs-section :type 'inputs-section)
   
    (outputs-section :type 'outputs-section
                     :box (the viewport box)
                     :color (the inputs-section color))
   
    (viewport :type 'viewport
              :box-color (the inputs-section color))))


 (define-lens (html-format assembly)()
   :output-functions
   ((main-sheet-body
     ()
     (with-cl-who ()
       (:table 
        (:tr
         (:td (str (the inputs-section main-div)))
         (:td (str (the outputs-section main-div)))
         (:td (str (the viewport main-div)))))))))
        


 (define-object inputs-section (sheet-section)

   :computed-slots ((color (the menu-control value)))
  
   :objects
   ((menu-control :type 'menu-form-control
                  :choice-list (list :red :green :blue)
                  :default :red
                  :onchange (the (gdl-ajax-call 
                                  :form-controls (list (the-child)))))
    
    
    
    (little-grid :type 'grid-form-control
                 :form-control-types '(text-form-control text-form-control button-form-control)
                 :form-control-attributes `((:ajax-submit-on-change? t)
                                            (:ajax-submit-on-change? t))
                 
                 :form-control-inputs (mapcar #'(lambda(row)
                                                  (list nil nil 
                                                        (list :onclick 
                                                              (the (gdl-ajax-call 
                                                                    :function-key :do-something!
                                                                    :arguments (list (the-object row index)))))))
                                              (list-elements (the-child rows)))
                 
                 :default '((:color :number :press-me)
                            (:red 42 "OK")
                            (:blue 50 "OK"))))

  
   :computed-slots 
   ((main-view (with-cl-who-string ()
                 (str (the little-grid form-control-string))
                 (str (the menu-control html-string)))))
   
   :functions
   ((do-something! (index)
      (format t "Processing row ~a...~%" index))))




 (define-object outputs-section (sheet-section)
   :input-slots (color box)
  
   :computed-slots ((main-view (with-cl-who-string ()
                                 (:p "The box volume is: " (fmt "~a" (the box volume)))
                                 (:p "The box color is: " ((:span :style (format nil "color: ~a" (the color)))
                                                           (str (the color))))))))



 (define-object viewport (base-ajax-graphics-sheet)
  
   :input-slots (box-color)

   
   :computed-slots ((length 300)
                    (width 300)
                    (display-list-objects (list (the box)))
                    (projection-vector (getf *standard-views* (the view-selector value)))
                    
                    (main-view
                     (with-cl-who-string ()
                       (str (the view-selector html-string))
                       (str (the reset-zoom-button form-control-string))
                       (str (the raster-graphics)))))
  
   :objects ((box :type 'box 
                  :length 20 :width 25 :height 30
                  :display-controls (list :color (the box-color)))))
            


 (publish-gwl-app "/ajax-test" "ajax-test:assembly")



@end cartouche 
@end smallexample



 @b{Example image is not generated!}

