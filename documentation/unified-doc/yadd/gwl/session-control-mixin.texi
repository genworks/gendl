@subsubsection Session-control-mixin

@b{Description}

Mixin to the root object of the part which you wish to have session control over

@noindent @b{Optional-input-slots}

@b{:org-type}

@itemize {}

 @item Type of original object, useful when viewing session report log

@end itemize

@b{:recovery-expires-at}

@itemize {}

 @item Expiration time of the recovery object. After the recovery object has replaced the orginal 
instance at what time should the recovery instance expire?

@end itemize

@b{:recovery-url}

@itemize {}

 @item Url to which a user will be redirected if requesting a session that has been cleared

@end itemize

@b{:session-duration}

@itemize {}

 @item Length of time a session should last without activity in minutes

@end itemize

@b{:use-recovery-object?}

@itemize {}

 @item Boolean. Determines whether expired sessions are replaced by recovery object. Default is nil.

@end itemize

@noindent @b{Settable-optional-input-slots}

@b{:expires-at}

@itemize {}

 @item Universal time after which the session should expire

@end itemize

@noindent @b{Functions}

@b{:clear-expired-session}

@itemize {}

 @item This is the function called to check for and handle session control
:&key ((debug? nil) "Boolean. Prints debug statement if needed")

@end itemize

@b{:clear-now?}

@itemize {}

 @item Boolean. Test to run to see if this session has expired and needs to be cleared now.

@end itemize

@b{:session-clean-up}

@itemize {}

 @item Gets called right before the instance is going to get cleared. Is intended to be used to stop any instance states that may not be elequently handled by the garbage collector. ie database connections, multiprocessing locks, open streams etc.

@end itemize

@b{:set-expires-at}

@itemize {}

 @item Method which will set the expires-at slot to the current time + the session-duration

@end itemize







 @b{Example image is not generated!}

