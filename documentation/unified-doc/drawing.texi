@node GDL Output Formats and Drawing
@chapter GDL Output Formats and Drawing

@node GDL Output Formats
@section GDL Output Formats

In GDL a series of output formats can be used in conjunction with the
"with-format" macro to produce customized output from GDL objects, as
shown in this chapter.

If you create new GDL objects, it is possible to create output-functions
for your new object for various formats by using the define-lens
macro. You can also define your own output-formats using the define-format
macro.  Please see the reference documentation for define-lens for
more details.

GDL has several output-formats and lenses already defined, which you
can use via the @b{with-format} macro. The basic syntax for
@b{with-format} is as follows:

Assume you have an object @b{my-obj} which contains geometry in its
leaves. By setting self @b{my-obj} you can output this geometry in Iges format using:

@smallexample
@cartouche

 (with-format (iges "/tmp/try.iges") (write-the cad-output-tree))

@end cartouche 
@end smallexample

Assume you have an object @b{my-obj} which is itself some geometry
(for example, a surface or brep solid). By setting self @b{my-obj} you can output its geometry
using:

@smallexample
@cartouche

  (with-format (iges "/tmp/try.iges") (write-the cad-output))

@end cartouche 
@end smallexample

To summarize, @b{with-format} takes first a literal list with the name
of the desired output-format followed by a stream or file name,
followed by any number of optional keyword arguments for the format
slots. Next it takes a body of code.  The body uses the @b{write-the} macro to
invoke an output-function. 

The most frequently used outputs formats in GDL are: PDF, DXF, VRML and IGES.

@node Portable Document Format (PDF)
@subsection Portable Document Format (PDF)

PDF is the native graphics and document format of GDL and as such is
the most developed. Most graphical and textual objects in GDL have PDF
lenses defined for them with at least a "cad-output" method. The term
"cad-output" is somewhat dated, as the output could refer to a paper
report with charts and graphs as much as a drawing of mechanical
parts, so these names may be refined in future GDL releases.

Available slots for the PDF output-format and their defaults:

@i{(page-width 612)}

@i{(page-length 792)} 

@i{(view-transform (getf *standard-views* :top))} 

@i{(view-center (make-point 0 0 0)) ;; in page coordinates}

@i{(view-scale 1)}

Please see  @ref{Drawing and Output Formats Examples} for examples.

@node Drawing Exchange Format (DXF)
@subsection Drawing Exchange Format (DXF)

DXF is AutoCAD's drawing exchange format. Currently most of the
geometric objects and drawing and text objects have a cad-output
method for this output-format. The GDL DXF writer currently outputs a
relatively old-style AutoCAD Release 11/12 DXF header. In future GDL
versions this will be switchable to be able to target different
release levels of the DXF format.


Note that the DXF writer is currently 2D in nature and therefore it is
only intended to work for 2D objects in GDL, i.e. drawings.


Available slots for the DXF output-format and their defaults:

@i{(view-transform (getf *standard-views* :top))} 

@i{(view-center (make-point 0 0 0)) ;; in page coordinates}

@i{(view-scale 1)}

Please see  @ref{Drawing and Output Formats Examples} for examples.

@node Virtual Reality Modeling Language (VRML)
@subsection Virtual Reality Modeling Language (VRML)

GDL currently contains a rudimentary VRML writer which maps GDL
primitive geometric objects (boxes, spheres, etc) into their VRML
equivalents. Future GDL releases will include surfaces and curves to
be outputted in the pure BSpline format which is supported by
BSContact and some other VRML and X3D viewers. It will also include
more object types and mechanisms to specify viewpoints, lighting,
textures, etc.

Please see  @ref{Example of a VRML Output Format} for a detailed exemplification

@node Initial Graphics Exchange Specification (IGES)
@subsection Initial Graphics Exchange Specification (IGES)

GDL platform supplies an IGES output-format with the optional GDL
NURBS Surfaces Facility. The IGES format will also convert certain GDL
wireframe primitives into appropriate curve and surface objects for
IGES output (e.g. l-lines into linear-curves, arcs into arc-curves).

Here are some examples of simple use:

@smallexample
@cartouche


;;
;; Writes the leaves of the current ``self'' object:
;;
(with-format (iges "/tmp/try.iges" :units :millimeters)
  (write-the cad-output-tree))


;;
;; Write the current ``self'' object but not children or leaves:
;;
(with-format (iges "/tmp/try.iges")
  (write-the cad-output))

@end cartouche 
@end smallexample

@sp 1
@itemize @bullet 
@item @i{Brep solids representation in iges.}

For breps, you can output them as individual breps or as a bag of the
faces (trimmed surfaces) making up the brep.

This is done with the format slot :breps-format, which can have the
value :breps (the default) or :surfaces, e.g.

@smallexample
@cartouche

   (with-format (iges "/tmp/try.iges" :breps-format :surfaces)  ...) ;; or

   (with-format (iges "/tmp/try.iges" :breps-format :breps)  ...) 

@end cartouche 
@end smallexample

@item @i{ Units in iges.}


The iges units can be specified with the format variable :units, e.g:

@smallexample
@cartouche

  (with-format (iges "/tmp/try.iges" :units :millimeters) ...) ;; or

  (with-format (iges "/tmp/try.iges" :units :feet) ...)

@end cartouche 
@end smallexample

The allowed values for :units are the keyword symbols in the
following list:

@i{(:inches :millimeters :feet :miles :meters :kilometers :mils :microns :centimeters :microinches :no-units-specified)}

The default is :inches.

@end itemize 

@node HTML Format
@subsection  HTML Format

The HTML output format is used extensively throughout GWL for
generating dynamic web page hierarchies corresponding to GDL object
hierarchies. Please see @ref {Custom User Interfaces in GDL} for
extensive examples of using this output format.

@node Base Drawing
@section Base Drawing

Base-drawing is the fundamental object which represents a physical
drawing on a piece of paper. Although the metaphor is a piece of
paper, a drawing can also be displayed in a GWL web application as an
embedded, clickable, zoomable, pannable image. An empty drawing does
not do much of anything. It has to contain at least one object of type
base-view to be useful.

A Drawing is generally output by itself, as one whole unit. GDL
currently does not support outputting of individual parts of a
drawing, or children of a drawing. The Drawing can have as many
children and other descendants as you like. Only those children which
are of type base-view (see @ref{Introduction to Base-view} ) will be 
included when the drawing is output.

The main user-controllable :input-slots to a drawing are page-length
and page-width. These are assumed to be in points, where there are 72
points per inch (about 28 points per cm) for purposes of printed
output. The default page size is for US Letter paper, or 8.5 inches
(612 points) for page-width, and 11 inches (792 points) for
page-length. Page-height is essentially the thickness of the page,
which is always zero (0).

@node Base View
@section Base View

@node Introduction to Base-view
@subsection Introduction to Base-view

Base-view represents a flat rectangular section of a drawing, and is a
window onto a set of 3D and/or 2D geometric objects transformed and
scaled in a specified way. The objects can be auto-fit to the page, or
scaled and translated manually with user-specified inputs.

A base-view by itself does not have any defined behavior in GDL. It
must be contained as a child object of a base-drawing.

See the reference documentation for base-view for detailed
explanations of each of the input-slots and other messages. Below is
an overview of the common ones:

@node The Objects to be Displayed in a Base-view
@subsection The Objects to be Displayed in a Base-view

There are three main input-slots for base-view which specify what
objects are to be included in a view:
@itemize @bullet
 
@item @i{objects} - a list of GDL objects. These objects will be displayed 
in each view by default. Note that these objects are taken directly --
the children or leaves of these objects are not displayed (n.b. this
is analogous to the cad-output output-function). These objects are
defined in the normal 3D "world" coordinate system, but will be
transformed and scaled according to the properties of the base-view.

@item @i{object-roots} - a list of GDL objects whose _leaves_ will be displayed 
in the view (n.b. this is analogous to the cad-output-tree
output-format). These objects are defined in the normal 3D "world"
coordinate system, but will be transformed and scaled according to the
properties of the base-view.

@item @i{annotation-objects} - a list of GDL objects (usually 2D objects such 
as dimensioning or text primitives) which you want to display in the view. 
These objects are defined in the coordinate system of the view, and are 
not scaled or transformed (so, for example, their size will remain constant 
regardless of the scale of the base-view).

@end itemize
@node The Properties of a Base-view
@subsection The Properties of a Base-view

The common user-specified properties for a base view are:
@itemize @bullet

@item @i{view-scale} - a Number which specifies a factor to convert from model
        space to drawing space (in points). If you do not specify
        this, it will be computed automatically so as to fit all
        objects within the base-view. NOTE that if this is left to be
        auto-computed, then you CANNOT normally refer to the
        view-scale from within any of the objects or object-roots
        passed into the view, as this would cause a circular
        reference. If you would like to override this restriction, you
        can include the object which refers to the view-scale in the
        view's list of immune-objects (documented in the reference
        materials).

@item @i{view-center} - a 3D point in the model space which should become the
        center of the base-view. If you do not specify this, it will
        be computed automatically so as to center all the objects
        within the view.

@item @i{projection-vector} - a 3D vector which represents the line of a
        camera looking onto the objects in model space. 


@item @i{left-margin} - Number which allows the left (and right) margins to be
        expanded.


@item @i{front-margin} - Number which allows the front (and rear) margins to be
        expanded.

@end itemize

@node Drawing and Output Formats Examples
@section Drawing and Output Formats Examples


Note that the robot-assembly is contained in

  (translate-logical-pathname "sys:src;demos;robot;")

and you should execute the following command before proceeding: 

  (cl-lite (translate-logical-pathname "sys:src;demos;robot;"))

this will insure that the robot example is loaded and compiled.



@node Example of a Base-drawing with a Contained Base-view
@subsection Example of a Base-drawing with a Contained Base-view



@smallexample
@cartouche

@include examples/drawing/robot-drawing.lisp

@end cartouche 
@end smallexample 
Set self to the robot-drawing and you will be able to 
output this drawing as a PDF file as follows:

@smallexample
@cartouche

(with-format (pdf "/tmp/robot-drawing.pdf") 
  (write-the-object (make-object 'robot-drawing) cad-output))

@end cartouche 
@end smallexample 

and as DXF with:

@smallexample
@cartouche

(with-format (dxf "/tmp/robot-drawing.dxf") 
  (write-the-object (make-object 'robot-drawing) cad-output))

@end cartouche 
@end smallexample 

Also you can test it in Tasty by instantiating robot-drawing in a Tasty
session, and invoking the Add Node (AN) action on the root object. Be
sure to set the Tasty view to top. Bellow is an illustration of the outputted file: 
@sp1
@center @image{images/robot-drawing,,4.2in}

@node Example of a Base-drawing with some Dimensions
@subsection Example of a Base-drawing with some Dimensions

Note that this example has the main 3D geometry in a separate branch
from the drawing itself:

@smallexample
@cartouche

@include examples/drawing/box-with-drawing.lisp

@end cartouche 
@end smallexample 

Set self to the box-with-drawing and you will be able to 
output this drawing as a PDF file as follows:

@smallexample
@cartouche

(with-format (pdf "/tmp/dimensioned-drawing.pdf") 
  (write-the-object (make-object 'box-with-drawing) 
                    drawing cad-output))

@end cartouche 
@end smallexample 

and as DXF with:

@smallexample
@cartouche

(with-format (dxf "/tmp/dimensioned-drawing.dxf") 
  (write-the-object (make-object 'box-with-drawing) 
                    drawing cad-output))

@end cartouche 
@end smallexample 

Also you can probe it in Tasty by instantiating box-with-drawing in a
Tasty session, and invoking the Add Node (AN) action on the drawing
child object. Be sure to set the Tasty view to top. 
Bellow is an illustration of the outputted file:
@sp1
@center @image{images/dimensioned-drawing,,5.0in}
@sp1
@node Example of a Base-drawing with two Views
@subsection Example of a Base-drawing with two Views

Now we give an example of a drawing with two separate views, one
trimetric and one top:

@smallexample
@cartouche

@include examples/drawing/box-with-two-viewed-drawing.lisp
   
@end cartouche 
@end smallexample 

Set self to the box-with-two-viewed-drawing and you will be able to 
output this drawing as a PDF file as follows:

@smallexample
@cartouche

(with-format (pdf "/tmp/two-viewed-drawing.pdf") 
   (write-the-object (make-object 'box-with-two-viewed-drawing) 
                     drawing cad-output))

@end cartouche 
@end smallexample 

and as DXF with:

@smallexample
@cartouche

 (with-format (dxf "/tmp/two-viewed-drawing.dxf") 
   (write-the-object (make-object 'box-with-two-viewed-drawing) 
                     drawing cad-output))

@end cartouche 
@end smallexample 
     
Also you can probe it in Tasty by instantiating
box-with-two-viewed-drawing in a Tasty session, and invoking the Add
Node (AN) action on the drawing child object. Be sure to set the Tasty
view to top. Bellow is an illustration of the outputted file:
@sp1
@center @image{images/two-viewed-drawing,,7.4in}
@sp1
@node Example of a base-drawing with Scale-independent Annotation-object
@subsection Example of a base-drawing with Scale-independent Annotation-object

Note that in the previous example, the character size on the dimension
changes from view to view, because the view-scale is different in each
view. The following example specifies the dimension as an
annotation-object defined in drawing space, so that it will maintain a
constant character size.

@smallexample
@cartouche

(in-package :gdl-user)
(define-object box-with-annotated-drawing (base-object)
  
  :objects
      
  ((drawing :type 'box-annotated-drawing
            :objects (list (the box)))
   
   (box :type 'box 
        :length 10 :width 20 :height 30)))

(define-object box-annotated-drawing (base-drawing)

  :input-slots (objects (character-size 15)
                (witness-line-gap 10)
                (witness-line-length 15)
                (witness-line-ext 5))
  
  :objects

  ((main-view :type 'base-view 
              :projection-vector (getf *standard-views* :trimetric)
              :length (half (the length))
              :center (translate (the center) 
                                 :rear (half (the-child length)))
              :objects (the objects)
              :annotation-objects (list (the main-length-dim)))

   (main-length-dim
    :type 'vertical-dimension
    :pass-down (character-size witness-line-gap witness-line-length 
                               witness-line-ext)
    :start-point (the main-view 
                   (view-point (the box (vertex :rear :top :right))))
    :end-point (the main-view 
                 (view-point (the box (vertex :rear :bottom :right))
                             ))
    :dim-value (3d-distance (the box (vertex :rear :top :right))
                            (the box (vertex :rear :bottom :right)))
    :text-above-leader? nil)
 
   (top-view :type 'base-view 
             :projection-vector (getf *standard-views* :front)
             :length (half (the length))
             :center (translate (the center) 
                                :front (half (the-child length)))
             :objects (the objects)
             :annotation-objects (list (the top-length-dim)))
@end cartouche
@end smallexample
   
@smallexample
@cartouche  
   
   (top-length-dim 
    :type 'vertical-dimension
    :pass-down (character-size witness-line-gap witness-line-length 
    :end-point (the top-view 
                 (view-point (the box (vertex :rear :bottom :right))
                             )))))

@end cartouche
@end smallexample
Bellow is an illustration of this example:
@sp1
@center @image{images/box-annotated-drawing,,6.2in}
@sp1
You can output this drawing as a PDF file as follows:

@smallexample
@cartouche

(with-format (pdf "/tmp/box-annotated-drawing.pdf") 
  (write-the-object (make-object 'box-with-annotated-drawing) 
                    drawing  cad-output))

@end cartouche
@end smallexample

and as DXF with:

@smallexample
@cartouche

(with-format (dxf "/tmp/box-annotated-drawing.dxf") 
  (write-the-object (make-object 'box-with-annotated-drawing) 
                    drawing  cad-output))

@end cartouche
@end smallexample

Also you can probe it in Tasty by instantiating box-with-annotated-drawing 
in a Tasty session, and invoking the Add Node (AN) action on the drawing
child object. Be sure to set the Tasty view to top.

@node Example of a Base-drawing with Immune Annotation-object
@subsection Example of a Base-drawing with Immune Annotation-object

The following is not necessary to understand, but might come in 
useful occasionally:

Sometimes you may want to specify a dimension in model coordinates,
but have its character-size, witness-line-length, etc. be predictable
in terms of drawing space, regardless of the view-scale. This can be
done by defining the character-size, witness-line-length, etc, as a
factor of the view's view-scale, but in order to do this, the
dimension object must be included in the views list of
immune-objects. Otherwise, a circular reference will result, as the
base-view tries to use the dimension in order to compute the scale,
but the dimension tries to use the scale in order to compute its
sizing.

Here is an example:

@smallexample
@cartouche

@include examples/drawing/box-with-immune-dimension.lisp
   
@end cartouche 
@end smallexample 

@smallexample
@cartouche

@include examples/drawing/immune-dimension-drawing.lisp

@end cartouche 
@end smallexample 

Set self to the box-with-immune-dimension and you will be able to 
output this drawing as a PDF file as follows:

@smallexample
@cartouche

(with-format (pdf "/tmp/immune-dimension.pdf") 
  (write-the-object (make-object 'box-with-immune-dimension) 
                    drawing  cad-output))
@end cartouche
@end smallexample

and as DXF with:

@smallexample
@cartouche

(with-format (dxf "/tmp/immune-dimension.dxf") 
  (write-the-object (make-object 'box-with-immune-dimension) 
                    drawing  cad-output))

@end cartouche
@end smallexample

and you can probe it in Tasty by instantiating box-with-immune-dimension in a
Tasty session, and invoking the Add Node (AN) action on the drawing
child object. Be sure to set the Tasty view to top.

@node Example of a VRML Output Format
@subsection Example of a VRML Output Format

In this example is illustrated the use of a dedicated computed-slot employed to
output a VRML file which contains the geometry of a simple vase.   

@smallexample
@cartouche

@include examples/drawing/vrml-example.lisp

@end cartouche
@end smallexample

You can output this 3D model as a VRML file as follows:

@sp 1
@itemize @bullet  
@item by setting self the vrml-example and asking at the prompt level for 
@b{(the vase-vrml).} or 


@item as presented before with:
@end itemize 

@smallexample
@cartouche

(with-format (vrml "d:/vase.wrl") 
  (write-the-object (make-object 'vrml-example) 
                    cad-output-tree))

@end cartouche
@end smallexample


It is also possible to export the 3D geometry in a VRML pure BSpline format 
which is supported by BSContact and some other VRML viewers. To achieve this, you have to 
set self on the vase @b{surface 0} and evaluate the following expression at prompt level:

@smallexample
@cartouche

(with-format (vrml "d:/vase.wrl" :use-bsplines? t)
  (format t "~a" (write-the cad-output)))

@end cartouche
@end smallexample

@i{Note: The VRML pure BSpline format is experimental at the moment.}   

Bellow is an illustration of the model as solid, tessellated  and iso-wireframe: 
@center @image{images/vrml,,8.4in}


@node Example of a IGES Output Format
@subsection Example of a IGES Output Format

In order to use this example, first you have to compile the example 
presented in @ref{Example of a VRML Output Format}).

@smallexample
@cartouche

@include examples/drawing/iges-example.lisp

@end cartouche
@end smallexample

Set self the iges-example and you will be able to 
output the 3D representation of the h-vase in a IGES file as follows:

@smallexample
@cartouche

(with-format (iges "/tmp/iges-example.igs ":units :millimeters)
  (write-the-object (make-object 'iges-example)
                    h-vase cad-output))

@end cartouche
@end smallexample

