@section Development of Projects using Files and Packages

While in the previous chapter most of the coding was done at the
prompt level, in this chapter the coding is done by using a project
management approach, in separate files. Each time you start a new GDL
project, it is recommended to structure your applications in a modular
fashion. This allows you to incrementally compile and load your
applications. To illustrate the best practice in creating a new GDL
project, we will describe in detail a small application. This
application is created and loaded following the next three steps:

@i{Note: To avoid confusion, at the beginning of each sample code the file name will} 
@i{be mentioned with the following notation:}  @b{;;--file-name.lisp--} 
@i{and in some  cases, comments will be added.}

@b{Step 1.} Create a new folder in your HOME folder, named
@b{shock-absorber}. Within this folder create a new folder named
@b{source}.

@b{Step 2.} In the @b{source} directory create the next three lisp
files (the file names used below follow the normal convention, but
your file names can potentially be different):

@b{The first file} will be named @b{package.lisp} and will contain
your package definition as mentioned below:
@sp 1
@cartouche
@smallexample
;;--package.lisp--
(in-package :gdl-user)
(define-package :shock-absorber ;;the name of your new package as key word
    (:nicknames :shock :picasso ) ;;the nicknames of your new package
  (:use ) ;;the packages used by your new package
  (:export #:assembly
   ;; Exported symbols
   )) 
@end smallexample
@end cartouche 
@sp 1

It is also possible to skip the package specification @b{(in-package :gdl-user)} 
as presented in this example code, if you refer to the package definition macro 
as @b{gdl:define-package}. 


Note that you can work directly in the @b{:gdl-user} package, which is
an empty pre-defined package for your use, if you do not wish to make
a new package just for scratch work.

For real projects, however, it is recommended that you make and work
in your own GDL package.

In GDL, the macro @b{define-package} is used to set up a new working package. 

Packages defined with @b{gdl:define-package} will implicitly @b{:use}
the GDL package and the Common-Lisp package, so you will have access
to all exported symbols in these packages without prefixing them with
their package name. You may extend this behavior by calling
@b{gdl:define-package} and adding additional packages to use with
@b{(:use ...)}.  For example, if you want to work in a package with
access to GDL exported symbols, Common Lisp exported symbols, and
symbols which are defined in other packages like @b{:my-utilities}, you
could set it up as follows:

@sp 1
@cartouche
@smallexample

;;--package.lisp--
(gdl:define-package :shock-absorber
    (:nicknames :shock  :picasso )
  (:use :my-utilities)
  (:export #:assembly
   ;; Exported symbols
   ))

@end smallexample
@end cartouche 
@sp 1

@i{Note: The ``Exported symbols'' option will be addressed in the next
chapter on a real case. However, the fundamental concept is that
symbols are contained in packages, and can be marked as ``internal''
or ``external,'' which is roughly analogous to ``private'' and
``public'' in languages like C++ and Java --- that is, internal
symbols should only be accessed from inside the same package where
they are defined. In the above example, the symbol @b{assembly} is
exported from the @b{:shock-absorber} package. Note that symbols named
in the export list should be prepended with ``#:'' --- this is for
``package hygiene'' reasons which are not important to understand at
this point.}

@b{The second file} will be named @b{assembly.lisp} and will contain
the definition for the toplevel ``assembly'' (i.e. object) of your
application. As you have already seen, this file will contain a GDL
object definition so it will have the following structure:

@image{images/define-object}

As stated in previous chapters, @b{define-object} is the basic macro for defining objects 
(i.e. creating classes) in GDL. A GDL object definition in which:

@itemize @bullet

@item @b{class-name} is any non-keyword symbol [i.e. a symbol not preceded by a colon (``:'')]. A GDL Class will be generated for this symbol, so that any name you use will override a previous class if one is already defined with the same name.

@item @b{mixin-list} is a list of other class-names (i.e. object definition names) from which this object will inherit. Note that the standard mixin @b{gdl:vanilla-mixin} gets mixed in automatically with any GDL object and carries some of the basic GDL functionalities (messages).

@item @b{specification-plist} is a plist made up of pairs made from special keywords and expression lists.

@end itemize
 
For the moment we will exemplify the use of the specification-plist by
defining a cylinder child object named @b{my-cylinder} contained by
the @b{new-object} as mentioned below:
@sp 1
@cartouche
@smallexample
;;-- assembly.lisp--
(in-package :shock-absorber)

(define-object assembly (base-object)

  :input-slots ()
  :trickle-down-slots ()
  :computed-slots ()

  :objects ((my-cylinder :type 'cylinder
                         :length 10
                         :radius 3))
  
  :hidden-objects ()
  :functions ()
  :methods ())

@end smallexample
@end cartouche 
@sp 1

The @b{:objects} and @b{:hidden-objects} are used to specify a list of
instance specifications, where each instance is considered to be a
``child'' object of the current object, @b{:hidden-objects} serves the
same purpose and has the same syntax, but hidden objects are
considered @b{hidden-children} rather than @b{children} (so they are
not returned by a call to (the children), for example).The inputs to
each object are specified as a plist of inputs and value expressions,
spliced in after the object's name and type specification; in the
presented case @b{:length} and @b{:radius} for the my-cylinder.

@b{The third file} will be named @b{file-ordering.isc} and is used to enforce a certain ordering on the files 
when the directory is compiled and loaded. Here is the content of an example for the above application:
@sp 1
@cartouche
@smallexample
;;--file-ordering.isc-- 
("package" "assembly")
@end smallexample
@end cartouche 
@sp 1
@b{Step 3.} Compiling and loading the application can be achieved by
invoking the @b{cl-lite} function.  This is the usual function used to
compile and load a directory tree. The function can be invoked at the
prompt as follows, assuming you have in your HOME folder a folder
``gdl-projects'' containing ``my-project,'' which contains the
``source/'' folder as described above:
@sp 1
@sp 1
@cartouche
@smallexample
@b{gdl-user(11): (cl-lite "~/gdl-projects/shock-absorber/")}
@end smallexample
@end cartouche
@sp 1
The @b{cl-lite} function will traverse the pathname in an alphabetical
depth-first order (if a @b{file-ordering.isc} is not defined),
compiling and loading any lisp files found in
@b{source/subdirectories}. A lisp source file will only be compiled if
it is newer than the corresponding compiled fasl binary file, or if
the corresponding compiled fasl binary file does not exist. A
@b{bin/source/} will be created, as a sibling to each @b{source/
subdirectory}, to contain the compiled fasl files.  If the
@b{:create-fasl?} keyword argument is specified as non-nil, a
concatenated fasl file, named after the last directory component of
pathname, will be created in the temporary directory which defaults to
a folder called ``tmp/'' in your HOME folder.  In practice, most of
the time you will invoke the @b{cl-lite} function in a more simple
fashion:
@sp 1
@cartouche 
@smallexample
@b{gdl-user(12):  (cl-lite "d:/new-folder/")} 

@i{!!!in case your pathname in windows is d:\new-folder\!!!}
@end smallexample
@end cartouche 
@sp 1
Once the application is compiled and loaded, it is possible to interact with the assembly at prompt. 
To achieve that, change the prompt package to @b{shock-absorber} by typing:
@sp 1
@cartouche 
@smallexample
@b{gdl-user(13): (in-package :shock-absorber)}

@i{!!!and set “self” to the new-object by typing:}

@b{shock (14): (setq self (make-object 'new-object))}

or the shorthand version of the above:

@b{shock (14): (make-self 'new-object)}

@b{#<assembly @ #x223c71a2>}
@end smallexample
@end cartouche 
@sp 1
At this point the global variable @b{self} is set to the @b{assembly}
instance, and you can ask for the object @b{my-cylinder} or for the
@b{length} or @b{radius} of the object @b{my-cylinder} as follows:
@sp 1
@cartouche 
@smallexample
@b{shock(15):  (the my-cylinder)}

@b{#<cylinder @ #x223cbefa>}

@b{shock(16):  (the my-cylinder length)}

@b{10}

@b{shock(16):  (the my-cylinder radius)}

@b{3}

@end smallexample
@end cartouche 
@sp 1

Basically, the presented approach is the root of a typical GDL application. In the next chapter, 
we will add more contour to this application using the complete @b{specification-plist} 
@i{(:input-slots :trickle-down-slots :computed-slots etc.)} in conjunction with the introduction 
of a set of other GDL features. The intent is to present the necessary steps in modeling a simple 
shock absorber, as the one presented in figure 5.
@sp1
@center @image{images/shock-absorber,,1.8in,}
@center Figure 5: Shock absorber

The example code for this geometrical model is further presented:

@cartouche 
@smallexample
;;-- assembly.lisp--
;; this is a new version of the file assembly.lisp 
(in-package :shock-absorber)
(define-object  assembly (base-object)
  :input-slots ()
  :trickle-down-slots ()
  :computed-slots ()
  :objects 
  ((pressure-tube :type 'cone
                  :center (make-point 0 70 0)
                  :length 120
                  :radius-1 13
                  :inner-radius-1 12
                  :radius-2 13
                  :inner-radius-2 12)

   (tube-cap :type 'cone
             :center (make-point 0 5 0)
             :length 10
             :radius-1 5
             :inner-radius-1 0
             :radius-2 13
             :inner-radius-2 0)
  
 (seal-cap :type 'cone
             :center (make-point 0 135 0)
             :length 10
             :radius-1 13
             :inner-radius-1 2.5
             :radius-2 5
             :inner-radius-2 2.5) 
@end smallexample
@end cartouche 
@sp 1
@cartouche 
@smallexample
   (floating-piston :type 'cylinder
                    :center (make-point 0 35 0)
                    :radius 12
                    :length 10)
   
   (blocking-ring :type 'cone
                  :center (make-point 0 42.5 0)
                  :length 5
                  :radius-1 12
                  :inner-radius-1 10
                  :radius-2 12
                  :inner-radius-2 10)
   
   (piston :type 'cylinder
           :center (make-point 0 125 0)
           :radius 12
           :length 10)
   
   (rod :type 'cylinder
        :center (make-point 0 175 0)
        :radius 2.5
        :length 90)
   )
  
  :hidden-objects ()

  :functions ()

  :methods ())
@end smallexample
@end cartouche 
@sp 1

As presented above, this geometric model is relatively simple; it is
built by using just a cone and cylinder from predefined GDL primitive
classes. However, even at this level of simplicity, it is not easy for
the user to foresee how each defined object will become instantiated
to form the shock absorber assembly. In order to allow for incremental
``discovery'' during the development cycle, GDL features a dedicated
inspection utility called @b{``Tasty''}, designed for graphical
development and testing purposes.
